[
  {
    "course": "ACCT1501",
    "reviews": [
      {
        "authorName": "HelpICantThinkOfAName",
        "description": "As with previous reviews here, as long as you're not bored out of your mind and keep up with the coursework you won't have any trouble with this course. The first half of the course sets up basic accounting principles and practices, and the latter half expands on specific concepts within accounting, such as assets, costs, and a dash of management accounting at the end. My only major gripe with the course is that it's necessary to own a copy of both the textbooks in order to complete your homework. I recommend this to every first-year business student and anyone who wants a practical gen-ed in the business school.",
        "rating": 3.75,
        "grade": "86 HD",
        "termTaken": "2020/T2"
      },
      {
        "authorName": "emilyygeorgexx",
        "description": "I found this course to be particularly challenging at times despite having some background knowledge from Business Studies. The first 3 or so weeks were fine but then as the weeks progressed it all builds on top of one another and becomes quite complex and a lot to deal with at once. It became really hard if you got stuck on concepts in like Week 4 and then you were also trying to learn the content in say Week 7. I think this was aided by the fact of yes, trimesters, as at one point they were trying to teach like 3 chapters of the textbook in one 2 hour lecture and this equated to approximately 100 or so pages of the textbook. The management accounting topics were just a bit odd compared to what we had learned in the previous 8 weeks. However, I think I enjoyed it more than the financial accounting content. The exams were pretty alright if you had done the practice papers and knew your stuff. However, in saying that the final exam was definitely more than challenging, particularly the multiple choice. The mid term was also fine, had plenty of time to spare. The online quizzes are pretty easy as well, a definite easy 15 marks to get. However, there is one group presentation in the term and its important to get a good group otherwise you just don't get the work done (although this is just common with group work in general). Lectures could get a bit boring and is definitely hard to stay focused for 2 hours straight. Some lecturers are better than others but otherwise they were pretty much the same. My tutor actually ended up being one of the lecturers so that was a bonus. Although, this course was okay and I did alright, I will not be completing 1B.",
        "rating": 3.0,
        "grade": "DN",
        "termTaken": "T1 2019"
      },
      {
        "authorName": "RuiAce",
        "description": "All students that study a degree offered by the UNSW business school must take this course. The first few weeks feel tougher than the later few, for someone like me who had no business background. Concepts are foundational and relatable to HSC Business Studies, however far more numbers are present now, requiring a calculator. It's not \"about\" certain concepts, it's actually demonstrating them using figurative examples. The lecturers appeared to have changed in the next semester (not sure if it will stay the same). Between the lectures, some were better than others. This lead to people getting easily bored of this course (which damages people's marks easily), because the last few weeks of lectures were significantly more interesting. Participation in tutorials is easy provided you actually try. In general, a WAM booster provided you're not bored to the point you don't understand stuff.",
        "rating": 3.5,
        "grade": "95 HD",
        "termTaken": "2016/1"
      }
    ]
  },
  {
    "course": "ACCT1511",
    "reviews": [
      {
        "authorName": "RuiAce",
        "description": "Conceptually, equally difficult to its prerequisite course. This course aims to fill in the gaps left behind 1A, thus provide everything you need to commence second year accounting. This was the first time since 2.5 years they switched BACK to the lecture/tutorial scheme. Note that prior to this semester it was taught in a 'seminar' style. Lectures are, in general, similar to 1A. The fortnightly tutorials are taught in \"The Place\" (ground floor, ASB) and put a nice emphasis on group work, that is, if you try to work with your group. Personally, I managed to make some good friends out of the tutorials. Quizzes are usually free marks, but they're not easy per se and it's possible to mess up. Final exam was a shocker; questions that were usually in the style of long responses got condensed into multiple choices and I found myself changing my answers too often. Definitely more content heavy than 1A, but if you did well in that then you can do well here. It is generally recommended to take 1B (if you must take it) RIGHT AFTER you do 1A. Otherwise, you forget too many concepts too easily.",
        "rating": 3.5,
        "grade": "87 HD",
        "termTaken": "2016/2"
      }
    ]
  },
  {
    "course": "ACTL1101",
    "reviews": [
      {
        "authorName": "RuiAce",
        "description": "There is a wide variety of things taught in this course. Being a legend among actuaries, Benjamin has taken action to reduce the content, but this course is inevitably going to be a bit over the place. The course is definitely introductory - whilst mathematics is definitely involved, it isn't outrageous yet and most calculations are kept to a reasonable difficulty. Can be a bit painful to study due to this nature of being over the place. The direct consequence of this is that there are heaps of methods that you need to remember. The introduction of the R tutorials add one extra annoying contact hour, but pays off. Any actuary will need some skill in computing to stand out in modern society, and this is one way to get it going. (I have to break a guideline and talk about the lecturer here: If you ask many people in my cohort they may evoke hatred for Benjamin. But if you ask ANYONE else, they'll say he is the best, which I believe.) (This course does NOT contribute to obtaining Part I exemptions. Note that CT2 is fulfilled by ACCT1501, ACCT1511 and FINS1613, and CT7 is fulfilled by ECON1101 and ECON1102. You may only commence fulfilling other CTs in second year. For reference, CT stands for 'Core Technical'.)",
        "rating": 3.0,
        "grade": "87 HD",
        "termTaken": "2016/2"
      }
    ]
  },
  {
    "course": "ACTL2111",
    "reviews": [
      {
        "authorName": "RuiAce",
        "description": "This course is compulsory for any student undertaking actuarial studies to meet their Part I exemptions. This course contributes to CT1. This course draws upon certain and contingent cash flows demonstrated in ACTL1101 as well as a few elementary concepts in probability. The first half of the course is mostly revision of material in ACTL1101, however more complex cash flows are also observed (e.g. the increasing annuity). Proper treatment is given to various other concepts such as bonds. Unfortunately, I feel as though many concepts such as forwards, options and swaps were not explained very well. This lead to quite a disaster on my part in that I had attained substantially high marks prior to the exam, but the inability to do a whole module (there are 6 modules) lead to a mark I never wanted to see at uni. Many concepts in Excel are very introductory, however powerful tools such as VLOOKUP are certainly studied. Much of the assignment is based off Excel as well. Note that the finals did not examine Excel, This course helps make concepts in ACTL1101 appear more clearer, however it is of my opinion that without FINS2624 (Portfolio Management, compulsory to all finance majors in commerce degrees) this course can be substantially difficult than what was perhaps intended. Note that not everything in the course was hard; only certain aspects of it.",
        "rating": 2.0,
        "grade": "71 CR",
        "termTaken": "2017/1"
      }
    ]
  },
  {
    "course": "ACTL3162",
    "reviews": [
      {
        "authorName": "MLov",
        "description": "This course is described as the most practical course amongst all level 3 ACTL courses. As the course title suggests, it will go through many general insurance techniques including application of generalised linear models, bayesian models and surplus process in the field of insurance. It will also go through run-off triangles, reserve calculation and some game theory at the end. Comparing to ACTL3182, this course covers much broader material but less in depth. The notations used in this course is not so pleasant and elegant if you came from a mathematical background, especially if you have recent done Bayesian inference. As per usual for ACTL courses, lots of memorisation is needed, because even if the algorithms covered in the lecture are in the orange book, it will look completely different, which makes you wonder why are even they doing this. Since this is probably my second last ACTL course that I will do, I will give you guys some thought about the program from ACTL/MATH point of view. At the start of the degree, I was actually surprised to see there are quite a few ACTL/MATH students. The common trait is that we generally can handle the mathematical component pretty well, but stumble in essays and reports (coz they generally need a lot of bs haha). And the majority of us become less interested in ACTL around 2nd to 3rd year, and later on only doing it for the sake of completing the degree. It maybe rumoured a rewarding degree, but it is much drier than what we initially expect. At first I would describe ACTL as the study of quantifying contingent events with financial / insurance applications, now I would just say it is the applications of contingent methods in the field of insurance. The field is getting narrower and narrower as you move up to higher years, which is not something that I enjoy. Lots of people are not doing their part II's, and I know many gods who excelled at the courses (Avg 90+ WAM) just switched to tradings and computer science (e.g. Master Rui) and other fields. Therefore when people talk about the high drop out rate in ACTL, it is actually not because the degree is how crazily hard, it is mainly because it is much less interesting that what we initially expected, and most people would move on to the field that they do enjoy. As such, I really admired those who continued on with the degree and they deserve the high payroll at the end. However, the first year ACTL content can generally be transferred to most business and science degrees, so there really is not that many harm doing ACTL for one year, get a taste of what it feel like, meet interesting people and then decide from second year onwards. Finally, I will give some advice for future students that are planning to do the same degree. - First, if you are planning to go on exchange, do it in your second year. Otherwise it is really hard to course match in your third year and onwards. - Second, DON'T DO MGMT1001 in the first year, you can do it in exchange so that it won't affect your WAM that much. - Third, join societies, meet motivated friends, go to peer mentoring programs etc, they have A LOT of resources that can help you through your future courses, also you can get an overview of the degree by talking to them. - Fourth, carefully read through the orange book, it has a lot more information than you would expect. And, DONT FORGET to bring it with you to exams.- Fifth, honestly, enjoy your time at uni. As many studies have shown, what universities bring the most is not knowledge, not skills, not ideas, but connections. And you will be surprised how far these connections can take you after university.",
        "rating": 3.0,
        "grade": "HD",
        "termTaken": "Unknown"
      }
    ]
  },
  {
    "course": "BABS1201",
    "reviews": [
      {
        "authorName": "HelpICantThinkOfAName",
        "description": "This course is fairly straightforward and enjoyable. The first few weeks are the only real difficult part of the course, where you are introduced to dozens of new terms to describe cells and cell function that you need to memorise. If you are able to overcome this then the rest of the course falls into place and it becomes easy to get a respectable mark. Mastering Biology is the online component of the textbook. It has a dedicated study area where you can test yourself using multiple choice questions and flashcards. Lots of questions for the mid semester exams and the final exams are taken directly from the study area. The group project serves as an interesting introduction to university presentations. You are assigned a group in your first lab and choose a topic from a list given in the course manual. You first write an individual essay analysing sources relating to your topic, a primary research article and a secondary review article and relate them to the course content. You then are tasked with making an educational presentation to your lab, due in the final lab. At first the group project seems like a waste of time, but it helps legitimise the content you have learnt in your lectures by linking the content to real world research. The labs are the opposite of physics labs. Instead of having too much work to do, it often feels like they are taking a 1.5 hour lab and stretching it out to a 3 hour long lab. By the end of the lab you are exhausted and want to lie down. The labs are not marked, but content from the labs does appear on the final exam, and the group project primarily takes place in the lab.",
        "rating": 4.0,
        "grade": "76 DN",
        "termTaken": "Unknown"
      }
    ]
  },
  {
    "course": "BIOS1101",
    "reviews": [
      {
        "authorName": "blasonduo",
        "description": "Dr Hayley Bates has put a lot of effort into this, she would host weekly revision sessions for the practicals where at points would set up the lab to be a complete mock practical, she put a lot of effort in places she didn't",
        "rating": 3.8,
        "grade": "78 DN",
        "termTaken": "2018 Semester 2"
      }
    ]
  },
  {
    "course": "BIOS2061",
    "reviews": [
      {
        "authorName": "blasonduo",
        "description": "I picked this course as an elective, and boy is this course run extremely well. The lectures are run by a lot of lecturers, which does mean that each lecture style changes every 2 weeks for so, however, this wasn't a problem because every single lecturer was so passionate with their topics. They were all engaging, and energetic. The course covers the classification of all vertebrates and the key features of their anatomy, including teeth, bones and their evolutionary traits. There was also a closer investigation into Australian vertebrates. A lot of the content is pretty straight forward and intuitive for the most part, but the main difficulty came from the new terminology. Sharks aren't sharks, they're Elasmobranchii with subgroups of squalomorphs and galeomorphs. Once you get over this initial hump and learn what the terminology mean makes the rest of the course pretty easy. The laboratories started out fantastically, starting with a dissection of a dogfish shark and microscopes of some animal tissue or small animal. It, however, did become pretty mundane as the weeks went on because it then only consisted of bones/specimen jars, which isn't bad in itself, but 4 hours a week of it made it stale, because there wasn't too much information that co-existed with the exhibits. The assessments of the course are really quite easy and stress-free. 30% of the final mark was essentially impossible to get less than 90% of it. The \"lab reports\" were just answering questions in the lab manual and handing them in at the end of the lab. The real kicker is that we were given the answers to every question before submitting. The dissections, were also marked extremely leniently (I can't draw for the life of me, but I still got 100%). The bird survey was also a nice excursion that made the assessment enjoyable. The only difficult assessment I found was the midterm, although multiple choice, some questions required you to know some specific things, and made it pretty difficult. This made me think that the final prac exam would be of similar difficulty, but I was really wrong, most of the questions were really simple, and if they weren't, the (again multiple choice) answers were pretty easy to guess. Finally, the final exam was in the same sense of the practice exam, and it wasn't multiple choice. ~80% of the final exam had the exact same questions in the practise exam, so studying made it really easy. Overall, I really liked the laid back aspect of the course that more focussed on interest and motivation rather than assessments, and I think that was the reason why I enjoyed it so much. In hindsight, my mark should've been higher for what I did get, nothing was difficult, but my mark is still good. Expect high marks if completing this course This course has been designed it a fantastic way.",
        "rating": 4.2,
        "grade": "80 DN",
        "termTaken": "2019 Term 2"
      }
    ]
  },
  {
    "course": "CHEM1011",
    "reviews": [
      {
        "authorName": "blasonduo",
        "description": "UNSW does a really good job with first year science courses, and this one was no exception. Although very overwhelming when initially looking at the course, once you understand it all, you can clearly see that this course has been very carefully structured to reduce workload, stress and difficulty of the course. One of the best things about the course is that everyone that sat the final exam had already passed the course, something I think all courses should be following. The course was split into two main categories; threshold and mastery content. To put it simply, threshold content was the simple part of the course, and was the minimum requirements to pass the course. The mastery content extends from the threshold, and is what gives us higher marks (CR,DN,HD). Each week, there was initially a threshold lecture, and then a mastery lecture, it all flowed really well. Scott Kable is a really good lecturer, even with the harder online times. Very interactive, supportive and taught at a very good pace. The only critique is the fact that if we ran out of time, it got too fast to comprehend almost anything. Alex Donald tried to follow the same, and it didn't work as well, but I'll throw this onto being inexperienced. He was very monotone, and the \"read off the slides\" type of guy. The assessments were also really good. I'm an avid fan of assessments being under 50% weighting and actually rewards hard work, and this course followed this mentality. Although the validation tests were stressful, they were an easy 40% if you consistently kept up with the content. The final exam was all an online moodle test, and it worked flawlessly. The biggest downside to the whole course was simply the online laboratory sessions, it was very boring, and I didn't learn as much as I should've. However, I don't blame the course here, but rather the situation. To sum this up, look forward to this course, if it were this good online, it'll be even better face-to-face. Just stay on-top of the work!",
        "rating": 4.3,
        "grade": "80 DN",
        "termTaken": "2020 T3"
      }
    ]
  },
  {
    "course": "COMP1511",
    "reviews": [
      {
        "authorName": "fun_jirachi",
        "description": "Really well-taught course and adapted best to being moved online (out of all three of my courses this term). The transition between topics was smooth despite the quick jumps in difficulty at some points and if at some point you get lost, it's easy to get back on track with more accessible avenues for help. If you learn things and adapt quickly, even with no prior knowledge of C it is a nice course with minimal pressure to start uni with, otherwise it gauges really well how you might fare with the learning curve in other courses in comp. Lecturers were great and it's actually really hard to fail - tutors guide you really well and help you out a lot. By far the best course I did this term, and it's not even close - even though it's a prereq for many courses and people are probably going to do it anyway, highly recommend",
        "rating": 4.5,
        "grade": "H",
        "termTaken": "T1 2020"
      },
      {
        "authorName": "kierisuizahn",
        "description": "Most of the difficulty of the course was in the two assignments. Previous experience in programming will help significantly. Getting a decent mark in the course is not difficult, however, getting a good mark will require effort in the assignments. The labs are somewhat optional, however each lab exercise needs to be marked in person at a lab, and can only be marked the week it was due or the following week, so attendance is \"mandatory\" or about half the lab sessions. The hurdle system in this course required successful completion of a practical arrays and linked lists question. Completing specific questions in the two lab exams and the final counted towards this hurdle, and failing to meet this requirement would result in a UF grade (basically a fail) regardless of your mark.",
        "rating": 4.0,
        "grade": "89 HD",
        "termTaken": "2017 S1"
      },
      {
        "authorName": "RuiAce",
        "description": "This course is one of the new courses introduced as part of UNSW CSE's massive renovation. It is the second time it's been offered (first offering was last semester), and replaces the old course COMP1917. It is generally regarded as the more intense of the bundle for engineering students that need only 1 computing course for their degree (the alternatives being COMP1911 and ENGG1811). This course introduces C, which is essentially one of the fundamental languages of the programming world. The focus isn't necessarily on just C syntax itself, but its applications in solving relatively simple problems. Attempting to design methods to solve these problems is generally the hard part, not necessarily the actual coding element. Content wise, the course is brilliant. It pretty much introduces all the basics expected for an introductory course without overkilling it. Everything is introduced from scratch, which really reflects the \"no assumed knowledge\" statement. Math required is fairly minimal (no calculus and such for sure). Teaching staff were also very helpful and taught really well. The staff and the content itself basically make up the bulk of the rating given. The extra .5 comes out of interesting assignments (again, content wise). The teaching staff did their best to cut down on this, which was definitely something I appreciated, but personally I just find blogs effort when I'm marked on them. So any bit of it damages it for me, but it doesn't really damage it enough to make me dislike the course. It was also nice seeing some increase in marks towards the end, regardless of the reasons behind it and how little there were. A small remark I do want to make before talking about the cons - you can never really know if you'll like coding unless you give it a go. Some people really loved doing it (including me) and other's hated it. This is just because coding doesn't work well with many people's brains; it's a bit algorithmically intense to be fair, and hence why the difficulty rating was above 2/5. So if it's of some interest, give it a shot, and then abort it only when you actually know you really dislike it. A surprisingly large amount of my marks seem to have fallen from style during the second half of the course. The style guide is something essential to the first course - I've seen outrageously disgusting code be written by some programmers and it just isn't legible. But the extent of its strictness felt too far in some regards (not EVERY regard), and it resulted in many marks going to waste. As well as being uncertain of where my code was incorrect every now and then. Quite disappointingly, just one of the three assignments ended up drowning away all of my expectations for my results (the other two were really great). So essentially, marks negatively bias my ratings (at least, when they are a cause of disappointment and not expected). But I maintain the relatively good quality of this course. Apart from a bomb thrown in the final practical exam, everything did feel quite easy for me. Any student capable enough should give this course a try.",
        "rating": 3.5,
        "grade": "82 DN",
        "termTaken": "2017/2"
      }
    ]
  },
  {
    "course": "COMP1521",
    "reviews": [
      {
        "authorName": "fun_jirachi",
        "description": "Really interesting course! Well-structured as well; given the prerequisites to do this course, it's actually quite easy to follow along and a lot of the stuff earlier in the term has some relevance later in the term which is really cool to see (makes you see the applications of everything you learn, even if some other applications weren't explored in depth). Cool topics (bar probably assembly code - improves logic, and was very fun but clunky and annoying to write up) and provided small intros to other comp courses later in uni (comp1511 didn't really do this as it was more just an intro to coding in general). Lectures were great - getting shown sample code/programs and seeing stuff that we were learning about actually happening made it really easy to learn. Would definitely recommend as a course regardless of if you have a predetermined path that doesn't require this course or not",
        "rating": 4.5,
        "grade": "91 HD",
        "termTaken": "2020 T2"
      },
      {
        "authorName": "kierisuizahn",
        "description": "A very easy course, with very little content. A few weeks were spent learning MIPS, which is easy to anyone with experience programming before, and is basically a few weeks of free marks. Lecture slides were sufficient for me, and I didn't go to lectures, so I can't comment on the lecturer. Overall a kind of boring course, but I enjoyed the MIPS programming somewhat. Those interested in embedded systems will probably like this course a lot more. Bit of a tip: don't change your perfectly fine code just before the submission deadline; it will break everything and you'll lose a mark because they have to roll your submission back (FeelsBadMan).",
        "rating": 2.0,
        "grade": "99 HD",
        "termTaken": "2017 S2"
      },
      {
        "authorName": "RuiAce",
        "description": "This course is one of the follow-ups to COMP1511, generally taken in the next semester (but can be delayed a fair bit for students not studying CompEng or not considering OS later on). There are two halves to this course in my opinion. The first half essentially focused on what was going on within/inside the computer when programs are being executed - hence the discussion on assembly. The assembly language used was based off the MIPS architecture (although we used the SPIM simulator when writing up MIPS code), Conceptually it wasn't really hard understanding MIPS - all we had to do was convert C code into it, but it can be quite tedious. The MIPS assignment was straightforward but certainly time consuming and not something that could easily be winged. (Most people understood MIPS well enough as required by the course towards the end of the semester. but it may have caused difficulty during the learning phase.) But it wasn't just assembly, like MIPS only lasted 2.5 weeks or so. There's also a slightly more in depth discussion with memory management and also the introduction of bit fields/unions. All of that stuff though I think I just rote learnt and took for granted. The second half presented all the systems - we looked at the Unix file systems and tools and techniques that software/hardware developers used (e.g. sockets, concurrency). Moral of the story with all of that -",
        "rating": 4.0,
        "grade": "94 HD",
        "termTaken": "Unknown"
      }
    ]
  },
  {
    "course": "COMP1531",
    "reviews": [
      {
        "authorName": "fun_jirachi",
        "description": "The course was really well organised and well run by the faculty. The only criticism I really have is that a lot of the content was crammed into the term, teaching both Python and software development. While software development was a priority, teaching Python was also a mandatory part of the term. Teaching Python was probably easier than it would've been otherwise considering COMP1511 was a prereq but at the same time, taking time to teach it takes away from teaching software development. However, I don't think this is any fault of the teaching staff as they did what they could given the circumstances and did it very well. They gave more than enough information for everyone to pass comfortably, marked leniently enough and were really friendly. Nice course - I'd recommend it even if it wasn't a prereq for many other courses.",
        "rating": 4.0,
        "grade": "86 HD",
        "termTaken": "2020 T3"
      },
      {
        "authorName": "kierisuizahn",
        "description": "A dry course I didn't find much fun in, but with some useful techniques. The marking was very subjective, but a lot of the tutors were relaxed in marking because of it, which made it alright. The main language for this course was Python, but you were expected to mostly self-teach it, and there were some other languages that were required in the web dev part of the course (HTML, Flask, Jinja, CSS + JS if you wanted). The project I found particularly boring, and without good group members, would have been unbearable; The course staff were good, but the content they had to teach was way too boring for them to be able to make it an interesting course regardless. A lot of the content was rote learnt, which I really didn't like, and made summaries somewhat of a necessity for the revision; a lot of the content was simple, but there was so much of it that you needed to spend more time than I initially planned studying for it. No web dev was tested in the final, as it was a major part of the project, and was difficult to test in an exam environment. I wouldn't recommend this course to anyone unless you need to do it for your degree, or it's required for a course you really want to do. If you do do it though, be prepared for rote.",
        "rating": 2.0,
        "grade": "94 HD",
        "termTaken": "Unknown"
      },
      {
        "authorName": "RuiAce",
        "description": "This course is one of the first year core courses in UNSW CSE degrees. It's focus is essentially on what the course title says - software engineering. The course was essentially written from the lecturer's brain (using her own experiences) in an attempt to make it as practical as possible. A software engineer more or less needs to go through the entire design process (search: software development life cycle) and actually build the software from scratch, as opposed to just coding away based off specs. The process was mostly achieved through the group project. (I say 'mostly' because the reduced time frame from the trimester model makes it hard to truly reflect the software development procedure.) Fact is though I just found things dry and didn't enjoy a lot of what I learnt. I don't see myself going into a software engineer's world if I have to go through that design process. Design was never something I liked greatly. I also found myself rote learning and relying on getting carried by my peers way too much for my liking in this course. On the programming side of things, the python coverage is quite little (it is NOT a programming course!) and I didn't really understand much of the web dev stuff either. Project can be a time drainer depending on how you approach it. If you have friends taking the course though, try to enrol into the same tute and do it with them. In saying that, I can still see how the course was 'intended' to be useful at least. I've been told that quite a fair bit of the stuff you learn here does get used in the real world. (After all, who's gonna write Google/Microsoft/... their specifications? They have to it themselves surely.) Possibly one day I'll appreciate having to take this course. My only praises about this course (and literally where all the 1.5/5 rating points came from) were that the lecturers and tutors were extremely nice with how they ran the course and evidently marked leniently. (Worthwhile mentions: Midterm was meant to be sat in class, then swapped with a 24hr take home test, then extended to a 48hr take home test. Also, web dev was not examined - thank goodness.) This was more or less a course where I just could not put up with the content (and only the content), but that alone affected things greatly.",
        "rating": 1.5,
        "grade": "89 HD",
        "termTaken": "19 T1"
      }
    ]
  },
  {
    "course": "COMP2041",
    "reviews": [
      {
        "authorName": "jamonwindeyer",
        "description": "A really fantastic course; the lab work is interesting and you see the practical applications immediately. Any course where the final assignment is building a website is fantastic in my books. The content is easy, but mastering the languages and developing your problem solving skills is the hard bit, and that is a continuing challenge. You get out exactly what you put in. Andrew was an awesome lecturer too!",
        "rating": 5.0,
        "grade": "84 DN",
        "termTaken": "2016/2"
      }
    ]
  },
  {
    "course": "COMP2521",
    "reviews": [
      {
        "authorName": "fun_jirachi",
        "description": "Perhaps because of the organisation of COMP1531 which I did at the same time, COMP2521 felt particularly poorly run. The course content was appealing because it was basically logic with extra steps, but I couldn't really shake the fact the course didn't have that feel good factor. It didn't really help that extra recordings and tutorials were often better resources to learn from than lectures, though there was markedly less work than last term (gauging by the reports of one friend complaining about the workload). The tutors were great - but there's really not much to add apart from the fact that unless you enjoy the content, I would not recommend taking the course as it exists right now.",
        "rating": 2.0,
        "grade": "86 HD",
        "termTaken": "2020 T3"
      },
      {
        "authorName": "anomalous",
        "description": "A very important course for anyone doing computer science or software engineering, since the content is quite relevant for the nature of and types of questions you may see in programming interviews when applying for internships and jobs. This course will also enable you to write better code, since you will now have enough knowledge of algorithms to select the appropriate one and analyse how efficient the programs you do write are. Lab work is quite straightforward and less in the character of COMP1511 with many short tasks, instead preferring to have one or two more substantial, related tasks on the main programming topics. The assignments can be time consuming in figuring out what you need to do and implementing it, so definitely don\u0092t sleep when it comes to starting on them. The midterm exam is quite reasonable - if you\u0092re confident in your programming, it can take as little as a few minutes to complete. The final exam is a straightforward test of your theory knowledge of all the topics in the course with a programming section that will usually focus on the main programming topics - linked lists, trees and graphs. When it comes to preparing for the practical section, I definitely recommend trying some of the problems on LeetCode et al. In the event that your exam mark was lower than your assignment marks, your assignment marks were adjusted by taking their harmonic mean . This scaling is always regressive, meaning that your mark would never be adjusted up, only down. There are reasons to use this - a big one is to punish plagiarism - however it only really sought to punish people even if they didn\u0092t cheat. However in 19T3, this was changed to only affect students for which there was a 45% difference or more in their assignment and exam marks. I can almost guarantee that because of this change, course marks were higher on average this term than they have ever been. I bring this up since in future offerings this may be tweaked yet again, so your mileage may vary.",
        "rating": 4.5,
        "grade": "99 HD",
        "termTaken": "19T3"
      },
      {
        "authorName": "kierisuizahn",
        "description": "An interesting course, with a few difficult parts, and very useful overall. One of my gripes with the course is the harmonic scaling applied to assignments and final exam results. If you get a lower mark in the final exam than your assignments, your assignment marks are scaled down using the harmonic mean. It's used to stop plagiarism, but serves to punish students regardless, since you're almost certainly going to go better in the assignments than the final exam. Didn't attend lectures so I can't comment on the lecturer, but the written materials were more than sufficient, and the tutorials went along with them well. In week 4 there was a \"Sort Detective\" lab where you were given two programs (compiled and with no read permissions so you couldn't decompile them) and had to run tests on them to figure out which sort they were, and write up a report about it (like a couple pages or something, not a proper report), which I found interesting.",
        "rating": 3.0,
        "grade": "96 HD",
        "termTaken": "2017 S2"
      },
      {
        "authorName": "RuiAce",
        "description": "This course is one of the immediate continuations of COMP1511. It replaced COMP1927. UNSW CSE recommends taking it in second year, however there really is no problem taking it in the second semester of first year. It is a prerequisite to almost all future computer science courses. The disappointing amount of marks I threw away in the final exam killed a bit for me. It's really my own fault and the course ain't to blame for it, but it does skew my rating quite far away from what it should've been. Algorithms are perhaps the most fundamental tool computer science students use. The study of algorithms involves trying to solve problems as efficiently as possible and also create the program to do so. On one hand, you need to understand how the algorithm works, but then on the other hand you need to know (or figure out) how to implement it. They're quite fun to explore when you sit down and attempt to understand it. This course serves as the introduction to algorithms, with two areas of focus: sorting and graphs. Sorting is quite self explanatory, but I think this video helps introduce the fun behind it all. The graph structure forms the basis for shit tons of stuff we do (it becomes clear that even Facebook is essentially just a huge graph). It leaves you with pretty much all the basic needs for you to get a job as a computer scientist, and you really should never forget what you learn in this course. It's just that important. At times, I found some of the lab exercises and assignments quite draining. The only thing that bugged me was that occasionally, our tasks weren't clear enough with what we had to do. I feel like the rumours that maths helps computer science starts here. My mathematical background certainly simplified a lot of bizarre algorithms for me a lot. But I don't think they're necessary though. At the end of the day, the algorithms are backed by logic, and that's a skill any computer scientist must have.",
        "rating": 3.5,
        "grade": "85 HD",
        "termTaken": "Unknown"
      }
    ]
  },
  {
    "course": "COMP3121",
    "reviews": [
      {
        "authorName": "fun_jirachi",
        "description": "Will start by praising the lecturer who made lectures worth showing up to - personable, clear, appropriate amounts of detail for literally everything. As for the course itself, it was a great course! Probably one of the most useful courses I've taken to date. Course content and the course itself were really well set out and I don't recall ever being lost. While I can have my complaints about the course forum, that's about where the complaints stop. The assessments were relatively chill and the workload was comparatively low; any stress I had with this subject was due to other subjects having assessment due dates converging, and was not as a result of this subject alone. What feedback I got on assignments was valuable, and the tutorial questions covered most variations of concepts taught, with good solutions that explained pretty much everything. It's impossible not to come away from this course having learned nothing of value, and having not enjoyed it (with the caveat of some engagement). While some students can claim to have been confused at one point with the content, the administration of the course is something I feel cannot be complained about, everything ran smoothly. Any enjoyer of COMP2521 should definitely take this course, as should any other interested party",
        "rating": 4.5,
        "grade": "93 HD",
        "termTaken": "21T2"
      },
      {
        "authorName": "Opengangs",
        "description": "This course is another core course for anyone doing a computer science degree and it is the lower one to COMP3821. The course was brilliant and it really shined in comparison to COMP2511 in terms of quality of assessments. The assessments were well spaced out and Aleks' decision to give us hints a week into the assignment was a step up as it allowed students who struggled with the course to appreciate the complexities (no pun intended) of designing an algorithm. The tutorial sets were really useful, not just for understanding the logic under the hood, but it also demonstrates a way for us to write our responses. Would recommend for those who don't need to take the course, to take the course.",
        "rating": 4.0,
        "grade": "100 HD",
        "termTaken": "20T2"
      }
    ]
  },
  {
    "course": "COMP3131",
    "reviews": [
      {
        "authorName": "anomalous",
        "description": "This is a course primarily focused on the frontend components of a compiler, i.e. the phases from reading in a source file to producing the first iteration of executable code for the program. If you\u0092re going into it to learn about things like compiler optimisations, then you might want to reconsider. You\u0092ll spend most of your time learning about parsing programs and extracting meaning from them, both theoretically (via some automata and language theory) and practically (via scanner generators and things of that sort). You cover the process of how a program is turned into an abstract syntax tree, and then how the AST is used in order to check that it is semantically correct and then to finally generate executable code for that program. There are components of compilers past this point, but like I said, they aren\u0092t within the scope of this course (or any other undergraduate course at UNSW anymore, it seems). The heart of this course is the set of 5 assignments, with (almost) each one following on from the last by getting you to build a phase of a compiler for a simple variant of C. This is all done in Java, so you need to be confident with extending a given Java codebase, although specific OOP knowledge isn\u0092t really needed outside of the basics and being vaguely familiar with how the visitor pattern works. You should also be comfortable dealing with a codebase that is a bit of a mess design-wise, as the starter code is quite questionable in that regard. A considerable amount of the lecture time is dedicated to talking about these assignments too, so in addition to the per-assignment FAQs and other documentation, you\u0092ve got everything you need really, and they shouldn\u0092t be too rough. Having imperfect solutions to the previous parts won\u0092t hamper you too much, since compiled reference solution files are given so that the supporting code can at least work for you in subsequent assignments. However, if you do want to try and fix your code beforehand, Jingling always has assignment marks out within a few hours of submission, which is really quite an impressive logistical feat, and also very good for the students. As an aside: this course pairs quite well with COMP4141 for the first few weeks. Just be careful of the workload later on in the term.",
        "rating": 4.0,
        "grade": "100 HD",
        "termTaken": "21T1"
      }
    ]
  },
  {
    "course": "COMP3141",
    "reviews": [
      {
        "authorName": "anomalous",
        "description": "Most people treat this as \u0093the Haskell course\u0094 because there is a fair bit of Haskell programming, but that\u0092s not its stated intention. Rather, it provides a perspective on how we can use ideas inspired by mathematical proof and reasoning to construct safe software: Haskell just so happens to be a good language for applying this theory. The true value of this course is in the appreciation it gives you for safety and reasoning about programs, which is a point that some people (typically the more applications-focused crowd, though I mean this in the nicest way) can miss, because a lot of the stuff in this course can come across as abstract nonsense. It really does force you to examine how you previously approached correctness and take a more principled approach to designing software, not only during the development process but also the testing process. On its own this is a very useful perspective to have, and makes this worthy of consideration as an elective for CS students (worth noting this is core for Software Engineering students, and I definitely agree with that). If you haven\u0092t done functional programming before, this course will probably make you feel like you\u0092re relearning programming, which is entirely normal. You don\u0092t have to write very much code at all in this course in terms of the number of lines needed to finish most tasks, but the tradeoff is that you\u0092ll be thinking much harder about each line than you\u0092ve probably ever done up until this point. To supplement all of this programming, there is some theory regarding types and the connection between programs and proofs, which is probably the coolest bit of the whole course (the surprise is ruined if you\u0092ve seen it before as I did though). Structural induction and natural deduction are also taught as it relates to that theory. While this is a bit of maths, don\u0092t worry - very few courses are necessary nor sufficient to have already covered it going into the course, so it gets taught from scratch. Overall, quite a fun course if a bit tough at times. This is a must do if you\u0092re interested in functional programming, since this course offers the most substantial introduction to the area at UNSW. If you like this course, consider following it up with COMP3161, which offers an analysis of programming language design (and particularly the design of functional programming languages).",
        "rating": 5.0,
        "grade": "93 HD",
        "termTaken": "21T2"
      }
    ]
  },
  {
    "course": "COMP3151",
    "reviews": [
      {
        "authorName": "kierisuizahn",
        "description": "Don't mistake \"foundations\" to mean \"basic\" - the course assumes you're ready and willing to put in the effort to learn the content if you're unfamiliar with concurrency in general. As with many theoretical computer science courses, the course involves a lot of maths, usually a lot of logic, and being able to understand mathematical notation. I'd recommend having dome MATH1081 before this course, though Liam has since left UNSW and may no longer be teaching the course, in which case the course could change completely (as it did the year before). Content-wise, the course focusses mostly on verification of concurrent programs. Things like proving a program will produce a required result using Hoare logic, or proving an algorithm will always terminate. Of course, this includes concurrent properties, like livelock and deadlock, amongst others. Towards the end of the course, the focus shifted to distributed systems, and how you can ensure a system running on several isolated systems maintains integrity and avoids deadlock. The course involves learning how to write Promela code, and it's expected that you can learn how to use Java to a basic level on your own (though some resources were provided to get you started).",
        "rating": 4.0,
        "grade": "91 HD",
        "termTaken": "Unknown"
      }
    ]
  },
  {
    "course": "COMP3153",
    "reviews": [
      {
        "authorName": "Opengangs",
        "description": "In short, the course was a huge interest booster marred by poor management by the administration team. This course serves to be the more practical side of theoretical computer science course. The original plan was to be introduced to a range of verification model checkers, such as SPIN/Promela, nuSMV, and SLAM/CBMC which helps to verify algorithms to solve different tasks (including satisfiability and LTL model checking). The theory of the course introduces students to concepts in modern day static analysis and logic in time (temporal logic), which is crucial to algorithmic verification (hence, the name of the course). The theory was interesting and has definitely been one of the better computer science courses as far as the content goes. Although there wasn't a lot of mathematical concepts, I found myself enjoying the study on topology of behaviour spaces and found that engaging. The assignments weren't too hard and it definitely helped grasp the concepts of the course a lot better. However, this course has been a nightmare to manage and study for. Assignments were released late, tutorial problem solutions weren't released at all (or at least, they were released extremely late). As a result, assignment marks were released extremely late. Assignment 1 marks were released a few hours before the",
        "rating": 2.5,
        "grade": "85 HD",
        "termTaken": "2021, Term 2"
      }
    ]
  },
  {
    "course": "COMP3161",
    "reviews": [
      {
        "authorName": "anomalous",
        "description": "This course is great, and probably my favourite that I\u0092ve done so far. It positions itself as a \u0093programming language appreciation course\u0094, and you spend a lot of time modelling the semantics of programming languages and learning what some common programming buzzwords (polymorphism, type safety, etc.) actually mean in a formal manner. It is initially quite mathematical as the preliminary tools for doing the aforementioned have to be introduced, but if you can make it through that then the reward is well worth it. The overarching theme of the course is definitely on the functional side, however given that the paradigm has been responsible for so many features enjoyed by mainstream languages, it\u0092s an understandable bias. That being said it\u0092s not all functional - you of course look at some imperative programming, crack plenty of jokes at OOP/Java\u0092s expense, and at the very end even do a bit of concurrency appreciation (which gives you a bit of a taste of COMP3151 ). The programming assignments provide you the opportunity to implement parts of a simple functional programming language in Haskell. Although they claim you don\u0092t need to know FP/Haskell already, not knowing it makes your life harder - for someone with only imperative language experience under your belt, writing Haskell code will probably feel weird and takes some time to get used to. This is an essential course if you\u0092re interested in programming language theory, and especially if you\u0092re planning to do a thesis in most areas within formal methods. Even if not, it\u0092s made me consider doing some courses in the future that I originally hadn\u0092t planned to, so I\u0092d still recommend it highly if you're looking for something to do.",
        "rating": 5.0,
        "grade": "94 HD",
        "termTaken": "20T3"
      }
    ]
  },
  {
    "course": "COMP3231",
    "reviews": [
      {
        "authorName": "MisterNeo",
        "description": "Very good course if you want to learn about the history of operating systems and how they make your computer work. You also learn about the various decisions OS programmers sometimes make about the designs, e.g. what type of file system data structure to use. Other topics include synchronisation, threads and deadlock, which I thoroughly enjoyed. The first 2 assignments were straightforward and easy, however Assignment 2-3 involved the OS-161 project where you implemented parts of a working operating system, such as the TLB and page table, plus you had to work in pairs. The final exam was a timed Moodle quiz because of online learning and it involved understanding certain features of OS's and why they are designed that way. Kinda bummed that the course was forced to move online halfway through the term because of COVID-19. I really enjoyed the lectures/tutorials and highly recommend the course to anyone doing computer science or similar.",
        "rating": 4.5,
        "grade": "97 HD",
        "termTaken": "20T1"
      },
      {
        "authorName": "RuiAce",
        "description": "This is one of the many level 3+ electives for UNSW CSE degrees. For the embedded systems major in computer science, it's one of the prescribed electives. This course is genuinely popular. Although I believe this course is a little overhyped, it deserves hype without a doubt. This is the course that REALLY starts teaching you about how the computer works, and really helps develop an appreciation for all the things you take for granted on your device. You can pretty much see the course coverage on the Lectures tab in the website (but note that you have to be enrolled to get access to recordings). It's precursor course COMP1521 might not be needed , but is extremely valuable. In fact, these words from the assignment should literally be ringing COMP1521 bells: locks and semaphores, file systems, virtual memory. I would recommended to do this course as quickly as possible after COMP1521, but it's not mandatory to. You use OS161 in this course, which is a relatively small-scale OS (compared to Linux, Windows, ...). But it's still a couple tens of thousands of lines of code, and you won't have the time to work with all of it. The assignments are tailored to implementing additional features on top of what is already featured in the codebase. The rule of \"planning things out before you code\" is perhaps more important than ever to code. It's very easy to get entangled in your code and lose track of what direction you're heading. It's also stupidly easy to make fatal bugs in this course. For example, back in COMP2521, if you had a memory leak the computer would probably fix it for you. (Reason being that Linux and Windows already know how to.) But if you forget something like a kfree() to a kmalloc() in OS, you pretty much lose the memory forever and break your system for good. (Well, it's fixable, but it's an excruciating pain to fix OS's damaged like this.) The extended version COMP3891 should appeal to everyone that has a strong, genuine interest in this course. But it's follow-up course COMP9242 is... ahahahahahaha. (But if you loved COMP3231/COMP3891 a lot, you should probably give it a shot.)",
        "rating": 4.0,
        "grade": "SY",
        "termTaken": "20T1"
      }
    ]
  },
  {
    "course": "COMP3311",
    "reviews": [
      {
        "authorName": "Opengangs",
        "description": "I have quite mixed opinions about this course. While the course serves as a good introductory course to database system management, I felt like I didn't really learn much from the course and it left a great deal to be desired. Coming into the course, I was expecting to build a database from scratch (or at least build off of a pre-existing database). Rather the assessments were just reading off a database (which isn't a bad idea for an assessment) but the focus shifted more to using Python / Postgres / PlpgSQL to read queries. As a result, I'm still unsure of how to construct a database schema and how you would properly manage the database. This is important because COMP3311 / 9311 might be the only database course a Computer Science student would take and leaving them without the skills of developing a database can be a detriment. The first assessment was really fun and I thoroughly enjoyed building SQL queries. The second assessment felt a bit unnecessary. To this day, I don't see what the point of building an assessment around \"degrees of separation\", particularly in a database course. It seemed to be more fitting to a course akin to COMP2521 where algorithms and data structures are the focus of the course. The first two tasks were fine, but the last task was lengthy, dry, and somewhat irrelevant. The lectures were basically taught by jas and I enjoyed his antics. The lectures were interesting, although a bit slow at times, and the QnA sessions were really interesting to attend. The quizzes were fairly easy and, with enough revision, you can blitz through them in about 10 minutes. An overall okay course; if the assessments aligned with the core of the course, then it would be a lot more interesting to do them and the reward of completing them would far exceed the painstakingly long hours of debugging SQL queries. An update: the final exam experienced soured my taste for the course. It is deserving of a 1.5/5. The theory side of the exam was actually alright and was quite fun, so the rest of the rant is solely based on the practical part of the exam. But holy fuck. The exam was so poorly written. The exam was cluttered with ambiguous specifications and when we asked for further clarifications, we were asked to refer to the specifications. To put it bluntly, no one who I talked to understood what was asked. And when we did, we didn't know whether what we were writing was evenly vaguely correct. This was caused by the lack of autotests or sample outputs - each question only had one partial output that doesn't address any of the ambiguity that the questions provided. It was possibly the worst exam I've taken to date and if it's completely automarked, there's going to be a barrage of complaints from the students.",
        "rating": 3.0,
        "grade": "71",
        "termTaken": "2021 Term 1"
      }
    ]
  },
  {
    "course": "COMP3331",
    "reviews": [
      {
        "authorName": "anomalous",
        "description": "I personally found this course a bit underwhelming, and I wish I picked something else instead. This is partly due to it just not being my thing, but also some not so great things about the course when I took it. Wen is pretty meh as a lecturer, and the way he did things during the term I just found strange for some reason (I can think of no other words to describe it than those). Since the course runs all year though, you effectively have 3 lecturers to choose from depending on when you do it, so the choice is yours. I\u0092ve heard different (better) things from people who did the course at other times, so take all of what I've said here and below with a grain of salt. Although this course has a historical reputation for being easy, I wouldn\u0092t be so hasty. There's a lot of content to deal with, and many places where you can lose marks very quickly. The midterm especially can be dangerous because although it\u0092s all multiple choice, you lose 0.25 marks for each wrong answer on top of not getting any of the marks the question was worth. I also don\u0092t know if it was just me, but the final exam was a combination of strange and hard; though I must confess, I didn\u0092t study well for this one and ended up paying for it. On the other hand, the practical work is pretty easy marks. The labs are tedious but straightforward, and if you stick around for your lab classes, the tutor often goes through the lab giving some of the answers to get you started. The assignment is also fair; the main difficulty for me was interpreting the spec, and reconciling it with the clarifications given on the forum. It\u0092s also released quite early to let people get a head start if they want. While I found the content useful and definitely stuff worth knowing as a CSE student, one of the big things which always rubbed me the wrong way about it was how closely this course follows the textbook. I know people who say some courses are just \u0093paying to be read a textbook for 10 weeks\u0094 are cliche at this point, but in this case I tend to agree. It\u0092s always been my experience that lectures added something to the content which made a course worth taking over reading a textbook in your own time, and perhaps it was just the lecturer when I did it, but I didn\u0092t really get any of that with this course. I feel like it would\u0092ve been more worthwhile taking something else and just self-studying the material in my own time using the book. To me then, it seems that it, like many other courses in CSE, is a gateway course; a course that allows you to do further courses in the area of networking, and other interesting courses like COMP9243 that have it as a prerequisite. If you have no current aspirations to do those though and you\u0092re tossing up between it and something you think might be more interesting, what I\u0092d suggest is take that other course and skim read the networks textbook a bit to get a feel for it. If you find what you\u0092ve read interesting and you have the room to do the course or you change your mind about those future courses, then you\u0092ve got some room to breathe still. If you're someone who's been told by others that you should do this course because having knowledge about how the internet works is useful (and they're right), I'm not entirely sure that doing this course is the best way to go about that. I don't want to discourage people from doing something they might enjoy, though, so regardless of your situation, I'd recommend reading the book and getting a feel for the course first.",
        "rating": 2.0,
        "grade": "80 DN",
        "termTaken": "20T2"
      }
    ]
  },
  {
    "course": "COMP3411",
    "reviews": [
      {
        "authorName": "kierisuizahn",
        "description": "This course was a pretty interesting course overall, but didn't go into enough depth. Instead, we covered a lot of topics very briefly, which ended up leaving me somewhat starved for depth. A good introduction to different parts of the broad topic that is AI, but not very interesting if you're looking to go into certain topics a lot, and requiring a fair bit of calculation. The multiple choice format for the final was for quicker marking (now that trimesters force it), and was pretty well executed, but the previous written exams seemed to suit the course a lot more, and allowed them to test your understanding of the content better, beyond just being able to calculate the required quantities. Dr. Blair was a somewhat dry lecturer, which made the lecture slides easier to go through, but the content on OpenLearning was sufficient anyway.",
        "rating": 3.0,
        "grade": "93 HD",
        "termTaken": "Unknown"
      }
    ]
  },
  {
    "course": "COMP3891",
    "reviews": [
      {
        "authorName": "kierisuizahn",
        "description": "If you have any interest in low-level programming, this is a good course, and leads on to COMP9242. The exam was really easy overall, but this may have been because it transitioned online. The last two assignments really need you to have read a substantial amount of the OS161 codebase to do well, but having done so it's relatively easy. I advise you to set up a good IDE on your local system to do the assignments, as doing it through VLab or SSH is painful, and it's very difficult to navigate such a large codebase without an IDE with decent features (I recommend VSCode - once it's set up you can very easily find what you need). Much of the documentation is in the code as comments, rather than in a separate document. The content itself goes through an introduction to concurrent programming, and how OS's are made, along with the surrounding environment (so things like how I/O happens, interrupts, multiprocessing). Most of the content is relatively straightforward, and is pretty easy to understand as long as you pay attention to the basics. If you follow the lecture content, or can cram well, then most likely this will be a WAM booster. Do we warned though, the final mark is a weighted geometric mean of your assignment and your final exam mark, so if you screw up one of the components, it may affect your overall mark substantially.",
        "rating": 4.0,
        "grade": "SY",
        "termTaken": "Unknown"
      }
    ]
  },
  {
    "course": "COMP3900",
    "reviews": [
      {
        "authorName": "kierisuizahn",
        "description": "I hate project courses, especially when you need to group with people you don't know. Luckily, my group members were good, and made the whole experience palatable. Definitely coordinate tutorial times with your friends to get a good group you get along with, or the whole experience might just be hell. Although there's \"lectures\" they basically aren't anything useful, and there's only about 3 or 4 of them throughout the term. The majority of the marks are in the final demo, but if you leave it until the week before the final demo, you probably won't have enough time. If you plan on doing a custom project, make sure you have enough features to satisfy your tutor, but not too many. Our tutor wasn't convinced so we added more features to get approval and suffered for it. You can use any language you want as long as your tutor will be able to follow your instructions to set up and run your project on their own computer. From what I can tell, the requirement that your project be \"novel\" is just so they can give no one 100% in those criteria. Overall a pretty bad course, I really hate project courses, and we left our milestones until the days before the deadline so didn't sleep for days at a time to get it done. Our tutor was relatively nice marking though.",
        "rating": 1.0,
        "grade": "94 HD",
        "termTaken": "Unknown"
      },
      {
        "authorName": "RuiAce",
        "description": "This is one of the later core courses to computer science students. It's not required in software engineering degrees mostly due to the fact that the software engineering degree already mandates many projects of a similar calibre as well. Honestly, this course was the biggest waste of my time at university thus far. It's really taught me nothing but that at this point in time, I hope I will never be a software engineer in the future. I already hated having to design software from COMP1531, and this is just that on steroids. And no matter how much the software development life cycle makes sense (user stories, gradual coding and testing etc.) makes sense, I don't want to do it. The default projects lacked too much variety. They literally felt like the same project but just in different applications. Difficulty may have been skewed for us though because the optional project we picked was probably taking things a bit too far. The software worked (at least, it satisfied our user stories), but it cost countless hours of sleep. And honestly that's why I'm not proud of my \"mark\". It really felt like my team members' marks, because very often I couldn't even tell what was going on. I was just super blessed to have a ridiculously strong team that didn't hate me for my ineptness in the project. It was also quite stressful seeing the times when they'd have to lose sleep over the tasks at hand. Proposal also took forever for 10%. It felt like the amount of work required for a 30% weighted task. So pretty much I could salvage nothing fun out of this course. The 0.1 rating is entirely to credit that our tutor was so extremely nice to us.",
        "rating": 0.1,
        "grade": "N",
        "termTaken": "20T2"
      }
    ]
  },
  {
    "course": "COMP4121",
    "reviews": [
      {
        "authorName": "kierisuizahn",
        "description": "A really interesting course that covers some of the more current algorithms. We didn't really go over parallel algorithms (even though it's in the course name). The course content changes every year, but for us we did some basic review of COMP3821 stuff that was cut from the course since Aleks stopped teaching it (skip lists, Karger's min-cut algorithm, etc.), Google PageRank, some voting aggregation and recommender systems, and some applications of discrete Fourier transforms and similar. If you've done generalised Fourier series in MATH2221 then most of the DFT stuff should be familiar. Some of the proofs are quite maths-heavy, though Aleks is really good at explaining the concepts regardless. Be warned though, you'll be expected to understand how the proof and concepts work, so if you don't have a good relationship with maths you might want to reconsider. The project is probably the main part of this course, and the lack of marking criteria is kind of annoying, but Aleks told us that he'd basically accept anything as long as it related to algorithms. Always best to check with him before you start though. The content isn't very difficult if you put in the time to understand it, but since the exams were open book, you're tested on your understanding more than your ability to regurgitate the content. I much preferred this personally, but it meant that a few trickier questions could be snuck into the exam testing how you'd extend some of the stuff we learnt to new or harder scenarios. Regardless, it was a very fun course, and I'd recommend it to anyone thinking of going into data science or theoretical CS. It goes over a lot of different algorithms and their uses, without sacrificing depth of study. Also, Aleks is great, love him.",
        "rating": 4.5,
        "grade": "100 HD",
        "termTaken": "Unknown"
      }
    ]
  },
  {
    "course": "COMP4141",
    "reviews": [
      {
        "authorName": "Opengangs",
        "description": "The rating would be a 5/5 if the issue of administration were resolved but alas, even after a year, it has not changed. The course material is really fascinating but definitely not a typical COMP course. If you decide to take the course, be prepared to work your butt off. The assignments are really fun to do, but they can take so much of your time if you're not up to date with the course material. The main complaint of the course (and the sole reason why this is deserving of a 4/5 and not a 5/5) is because of administration. It seems somewhat ridiculous to receive marks or feedback (if at all) so late in the term, especially when all of the assignments have been submitted. It makes the feedback that we receive meaningless because we can't use it to improve on the quality of the work. If feedback and/or marks were returned back to us in a timely fashion, then I may consider bumping this up to a 5/5.",
        "rating": 4.0,
        "grade": "90 HD",
        "termTaken": "2022 Term 1"
      },
      {
        "authorName": "anomalous",
        "description": "This is a really nice course, and it\u0092s very interesting if you want to learn more about the fundamentals of how we define and analyse computation in its purest forms. The first half of the course answers the question \u0093how can we model computation?\u0094 by looking at various types of languages and their corresponding machines. After these models have been sufficiently established, the second half of the course switches gears in order to answer the question \u0093how can we properly analyse computation?\u0094, by introducing formally the notion of resource-bounded computation and examining many complexity classes that generalise/extend the two most famous classes, P and NP. In some sense it\u0092s a bit of a crime that people studying CS don\u0092t have to do this course or anything similar: computation is the literal basis of the field, yet I think many would struggle to explain what exactly it means when asked. This is an essential for the theoretically-minded CSE student, or anyone who really likes mathematical COMP courses. There is a price to pay for all of this fun, though - this is quite a hard course. There is no programming to speak of (although we did get to write Turing machines to be run on an online simulator, which is about as close as it gets), so if you struggle with some of the more CS-style math (think MATH1081), proving things and particularly at coming up with constructions, then it\u0092s likely that you\u0092re going to struggle to keep up with assessment tasks. While this has been one of my favourites, what drags down my rating of the course in terms of the quality of experience is timing issues. Unfortunately, it seems like Paul was dealing with some personal issues on the side of lecturing this term, so there were quite a few instances of delays. A lot of the assignments were released a few days later than anticipated, we didn\u0092t get a lot of the exam prep stuff promised (we ended up getting tutorial and assignment solutions, but none of the past assignment/exam questions) and we didn\u0092t receive any marks back for the assignments until after the final exam. It\u0092s a shame, because if he was a bit more prompt with things, or was at least up front that he was busy and couldn\u0092t get them to us, this course would be an easy 5/5. I hope in future offerings he\u0092s a bit more timely with releasing things.",
        "rating": 3.5,
        "grade": "94 HD",
        "termTaken": "21T1"
      },
      {
        "authorName": "kierisuizahn",
        "description": "A really fun course, especially if you're mathematically-inclined, or you're interested in theoretical computer science. All of the assignments and exams are proof-heavy, so you'll need to be pretty well-versed in formal proofs and proof techniques. If you've done COMP3821 , you may have been introduced to the P/NP complexity classes already, which is the starting point for the course. There's a lot of hardness reductions (if you know what they are) throughout the course, and quite a bit of construction, requiring a different kind of problem solving than many of the courses that you've done beforehand. I really enjoyed this course though, probably more so than any previous COMP course. Content-wise, you start off going over some very basic proof stuff, revising some of the techniques from MATH1081 , but the pace picks up pretty quickly. The whole course revolves around the foundations (not the basics) of theoretical computer science, from defining basic complexity classes like P and NP, leading to more involved classes like PSPACE, L, etc. Towards the end of the course you'll start looking at the polynomial hierarchy, and some of the more unknown areas of computer science with some (less-known) open problems. Once again, I highly recommend this course to anyone interested in theoretical computer science.",
        "rating": 5.0,
        "grade": "SY",
        "termTaken": "Unknown"
      }
    ]
  },
  {
    "course": "COMP4161",
    "reviews": [
      {
        "authorName": "kierisuizahn",
        "description": "The course covers a lot of theory regarding automated theorem provers and the foundations such as lambda calculus, but the assessments are generally quite practical, and it has a large focus on learning how to use Isabelle itself. A pretty interesting course overall, especially towards the end where the focus shifts to verifying C code using Isabelle. A lot of the theory involves some familiarity with mathematical proofs and notation. The proofs in Isabelle are generally made easier if you can reason logically to guide the proof as well, though you can sometimes just bruteforce it. Content-wise, the course covers untyped and typed lambda calculus and higher-order logic before diving into the concepts the internals of Isabelle are built upon; rule induction, inductive datatypes, confluence, and how Isabelle handles these internally. The course ends teaching how AutoCorres translates C code to a meta language that can be reasoned about using Isabelle to prove properties of programs with Hoare logic.",
        "rating": 4.0,
        "grade": "95 HD",
        "termTaken": "Unknown"
      }
    ]
  },
  {
    "course": "COMP4418",
    "reviews": [
      {
        "authorName": "Opengangs",
        "description": "This course felt very... meh. It didn't feel like I learned anything particularly useful if I want to go into Artificial Intelligence, and very much just felt like three separate courses squeezed into one. The course is split into three parts. The first two weeks delves into the different logic systems, including propositional logic, first order logic, and Horn logic. You learn how to prove statements, both semantically (interpreting its meaning) and syntactically (by manipulating symbols to arrive at other statements). The advantages and disadvantages of each logic system is explored and gives further motivation to why we should care about other logic systems (for example, our logic system should be complete and sound, yet simple and easy to adapt to new rules). I found this to be the easiest of the three topics because it's the topic that is the most familiar to me. The next few weeks were exploring how agents share resources and how they should distribute bundles among each other so that certain properties of efficiency and fairness are respected. For example, if certain people express dissatisfaction about a candidate, their voice should at least be considered (which is something that's further explored in social choice). I found this topic to be... the most disconnected(?) of the three. It seems like this is a very specific field of artificial intelligence that should be taught as an economics course, not in this course. Even though the course content was interesting enough for me to continue, I often asked myself what the entire point of this topic was and found it hard to relate to aspects of artificial intelligence. The lecturer for this topic wasn't the best either; he didn't really go over how to do computations, but rather left it as an exercise for the viewer. So it took me longer to figure out what was happening than it needed to be. Even in the live session, he glossed over the computations and decided to focus on the less computationally heavy aspects, only for the bulk of the computations to appear in the final exam. The last few weeks were left to explore a rather esoteric language. The notion of Answer-Set Programming is to convert a problem statement into a computational model whose answer sets correspond to solutions to the original problem statement. The theory of the last topic was interesting enough since this is a rather new way (not really new, the language is more or less the same as Prolog) to view problem solving. The interactive session was dedicated to solving NP-hard problems, Abdallah did a great job at motivating the use of answer set programming and teaching us the tricks of the language. Overall, I felt that the course could have improved by making the link between the three topics a bit clearer and by motivating the middle topic a bit more. On their own, the topics would be interesting for anyone who just wants to learn new things. But if you're serious about artificial intelligence, it just felt very clunky and disjoint.",
        "rating": 3.0,
        "grade": "77 DN",
        "termTaken": "2021 Term 3"
      },
      {
        "authorName": "kierisuizahn",
        "description": "Overall, a mix of interesting and somewhat dry topics. The course is broken into three parts, each 3 weeks long (we had a break in week 4) and taught by three lecturers. The first topic is logic and how to reason, going over propositional and first order logic, then a few extensions like non-monotonic reasoning and SLD resolution. I found the content pretty easy, but also quite dry. A lot of symbolic manipulation. The second topic is answer set programming and planning, which is where you learn ASP as implemented by Clingo, and STRIPS (to some extent). There is very little content in this section once you get your head around how to solve problems using ASP. The last topic is social choice theory, going into cooperative and non-cooperative games, as voting/resource allocation algorithms. This was the fun part of the course for me, but is probably the hardest part of the course. There are a load of theorems and concepts to learn (though the theorems weren't really tested in the exam, not sure if that's going to stay that way though), and is where I spent most of my study time. All three of the lecturers were good. I've heard bad things about Abdallah from COMP3121, but he taught ASP well. Only the first two parts of the course had exercises, but the examples in the lecture slides for the third part seemed sufficient to get the concepts down. Probably one of the more interesting AI major discipline electives, if you're into theoretical CS. The maths isn't very heavy, but you're expected to be competent for some of the more difficult proofs.",
        "rating": 4.0,
        "grade": "88 HD",
        "termTaken": "Unknown"
      }
    ]
  },
  {
    "course": "COMP6741",
    "reviews": [
      {
        "authorName": "kierisuizahn",
        "description": "God I love this course. I found the course content really interesting, and the content was taught well. It follows on heavily from COMP4141 , starting off with NP-reductions before moving more into parameterised algorithms. Being familiar with reductions will help (since the course has so many), and having some experience with formal proof methods will help as well. A really nice course if you're interested in theoretical computer science, and more so if you're interested in complexity theory and parameterised algorithms. The lectures are pre-recorded, and the lecture timeslots are instead consultations, where Serge went over the exercises and assignment solutions, which really helped with understanding the course. Content-wise, the course begins talking about complexity in general, and NP-hardness reductions, before moving onto parameterised complexity classes. The remainder of the course mostly focuses on techniques to find FPT algorithms, and other parameterised classes, as well as establishing several examples to base reductions from, and a lot of theory behind the techniques. It also discusses different parameters, and how they can affect tractability. The course ends discussing heuristics, and using local searches as a method to solve NP-complete problems efficiently.",
        "rating": 5.0,
        "grade": "100 HD",
        "termTaken": "Unknown"
      }
    ]
  },
  {
    "course": "COMP6771",
    "reviews": [
      {
        "authorName": "cherloire",
        "description": "Despite the big self learning component of this course (which is basically wading through cppreference.com and S/O), this course has the best content out of any course I have learned so far. Hayden is a really great lecturer. One of the comments I've seen a few times about him is that \"he doesn't seem very knowledgeable since he googles stuff in the lectures\". I actually think this aspect of his C++ teaching is good - most of the time in this course you will spend navigating online C++ library specifications etc, and seeing him use these websites and picking up on the things he looks for when seeking an answer will become very relatable as students complete the assignments. The forum support (edstem) is excellent, shoutout to one of the tutors Nathaniel. I really like the way the language is presented in the lectures, and students can immediately see the advantages of C++ over other languages they will have previously learned in CS at UNSW such as Java and C. One thing I wasn't aware of initially was that the course is more of a \"C++ design course\", in other words how to write C++ in a \"correct\" way (as there are many ways to do things in this language). The assignments are tailored towards this idea - rather than getting students to build cool applications in C++, the assignments are a means to reinforce good C++ practices. This did slightly get on my nerves a bit with the assignment marking though - different tutors marked assignments differently, and it seemed there wasn't much of a consistent marking criteria in some places, which became very obvious as I talked to other friends taking the course. The assessment structure, being heavily assignment loaded and only a 30% exam, is a big plus IMO, and I think more CS courses should move to this model (if they haven't already). This is pretty rough however if you have a heavy workload term with other assignment loaded courses. The first question of the exam doesn't really test the learning done throughout the course, which was mainly from learning about and leveraging C++ features to complete the assignments. Instead it was an algorithmic type question that students could have completed before ever taking the course using C knowledge. The second question specification was a bit poor, many important details were left in a footer at the bottom, which took me a while to read as I was trying to decipher the overall question (thankfully these were only small parts in terms of marks). Despite this, I personally I thought the exam was reasonable, and could have done better if I was well slept and/or better prepared, however it was tight, and many students did not finish (or get close to finishing).",
        "rating": 4.5,
        "grade": "96 HD",
        "termTaken": "21T2"
      }
    ]
  },
  {
    "course": "COMP9417",
    "reviews": [
      {
        "authorName": "RuiAce",
        "description": "This is one of many Ai courses offered at UNSW. At this point I really feel \"machine learning\" is a buzzword, but the course outline definition is loosely speaking enough. Namely that ML is the algorithmic approach to learning from data. It can be perceived to have a similar goal to statistical modelling, but in ML prediction accuracy tends to overrule interpretability of the model. The course introduces some classical ML techniques, but also touches on pieces of the current state-of-the-art models (e.g. ensemble learning, neural nets). There's quite a lot of content, but this is to be expected since ML is currently rapidly growing. Generally speaking it is a good overview to current ML techniques though. (Surprisingly, it's also made me appreciate neural nets more, despite only spending 1 week on it.) As a result of so much content though, the lectures were quite fast paced. For a math major like me i didn't care, but I can see it being difficult for other students. I should direct your attention to this review briefly, and how the final exam dragged a 3/5 down to a -5/5. Thankfully that was over. No idea if the different lecturer meant anything here, but my exam was essentially 50 MC. Not a great experience per se - the curveball questions were quite hard. But the exam didn't feel evil or bizarre at all. What hurt the rating? Well, homework 0 was a grind for just 1%. Not a hard to get 1%, but tiresome. As the course progressed, this was kind of forgotten, because both subsequent homeworks were interesting and made up for it. Then it came to the project. In all fairness, the hackathon itself was interesting - good final goal we were aiming for, and",
        "rating": 4.0,
        "grade": "97 HD",
        "termTaken": "22T1"
      },
      {
        "authorName": "kierisuizahn",
        "description": "The course content itself was pretty interesting, though the first half of the course was pretty dry if you'd already done a course on statistics. The last part of the course on learning theory is really interesting if you're looking into theoretical CS. The homework problems were really easy, and didn't represent the kinds of questions in the final at all, which made it difficult to gauge the difficulty of the final exam. The sample final was somewhat useful in that regard, but it would have been nice if it was in the same format as the final. The labs and tutes got kind of repetitive after a while, where I was spending more time interpreting the supplied Python code than I was actually doing the lab, but they did a good job of making me learn the ML packages we used for the project. Dr. Bain was a dry lecturer, but he explained concepts well in an intuitive and easy-to-understand manner. Rant time. The final exam was trash. It really ruined the course for me. That 3/5 rating doesn't take the final exam int account else it'd be -5/5. The first part of the exam was fine, but when we got to the second part all hell broke loose. There were multiple corrections mid-exam. About 50% of the second part was literally impossible to answer (the multiple choice \"answers\" were incorrect; a few of my friends even resorted to rigorous proofs to make sure they weren't just being stupid to prove there was no correct answer), and there were questions worth up to 12 marks. In a 120 mark exam with 60% of the final mark for the course, that's 6% of your overall grade. I can't say whether there were partial marks or not, but I hope to god there was or that was the worst excuse for a multiple choice exam I've seen. I'd say there weren't but the course admin and lecturer were being incredibly cryptic after the course forum started going crazy as people complained. The amount of calculations required for some if the questions was ridiculous for a multiple choice exam, taking an entire page or more (note we had no working paper so we had to use the space between questions) to get one answer to one question, which didn't even have a correct answer. Even better, after all these issues were brought up to the course admin, they told us it would be marked fairly, and then never told us what they were going to do or how it was marked anyway. I still don't know how it was marked and I sent an email explicitly asking how (to which I got a non-response). The management of the final exam was horrendous. I hope it's never like this again.",
        "rating": 3.0,
        "grade": "90 HD",
        "termTaken": "Unknown"
      }
    ]
  },
  {
    "course": "COMP9444",
    "reviews": [
      {
        "authorName": "kierisuizahn",
        "description": "A pretty boring course personally. Teaches you about different architectures of neural networks and how deep network work, along with the theory behind them, but only a little content beyond COMP9417 of interest. You'll need to have some way of using a good GPU, either by having one or by using an online service, or training the neural networks required for the assignments will be hell and take forever. If you're interested in AI, then you might as well take this course; it's not as bad as some of the other AI courses I've done. Otherwise, a little bland, and doesn't teach you much beyond what you can find online, as long as you're motivated enough. Content-wise, the course goes through several architectures of neural networks, taking a look at specialised architectures for language processing and image processing. Later in the course, you look at generative adversarial networks, and autoencoders, ending with a more theoretical look at deep learning and reinforcement learning. Overall a pretty decent overview.",
        "rating": 2.5,
        "grade": "97 HD",
        "termTaken": "Unknown"
      },
      {
        "authorName": "RuiAce",
        "description": "This is one of the level 3+ courses offered by the CSE faculty for the Artificial Intelligence specialisation. Loosely speaking, neural networks learn to accomplish various machine learning tasks but in ways that somehow mimics the human brain (hence their name). The course isn't actually 3/5 in terms of content difficulty (in fact, some might argue the content difficulty was as low as 1.5/5). The final exam appeared to be quite lenient (especially in contrast to its sister course COMP9417). The assignments weren't exactly hard to code. The difficulty lies in fine tuning the parameters in each network you had to code for said assignments. Accuracy was one of the important aspects we were examined on this term. Unless we achieved sufficiently high accuracy, it was not guaranteed that we'd receive the marks. Note also that training a neural network takes time (at least, once they become complicated). In the grand scheme of things, there's only so little time you have available to get to the high results. COMP9444 also uses PyTorch as of last year. (Prior to then, TensorFlow was used.) The quizzes and exercises were good preparation for the finals. It was highly recommended to do them. The problem I had with the course was that it felt like a bore. I felt like I was learning a lot about neural networks, instead of how to actually do them. The course definitely covered the basic stuff (e.g. backpropagation), but I felt that I just got given a bunch of equations and had to accept them. I couldn't really understand anything about why the equations worked the way they did. There was also an emphasis on the applications, which genuinely were cool, but like they didn't tell me much. I didn't see the point on being examined on all of these seemingly context-focused questions either. Also, PyTorch felt like something we had to self-learn. Fortunately, it was not hard. But the single lecture on it felt quite vague. That wasn't with every bit of the course though. To be fair, some stuff like reinforcement learning was made clear. It just felt boring for the most part. And lastly, despite the final exam being quite an easy one, the negative marking was also a bit stressful to deal with leading up to it. The negative marking felt significantly more punishing for this course than back in COMP3231 (Operating Systems).",
        "rating": 1.0,
        "grade": "95 HD",
        "termTaken": "20T2"
      }
    ]
  },
  {
    "course": "DATA1001",
    "reviews": [
      {
        "authorName": "Mechonics",
        "description": "Not a very well designed course at all. Firstly, let's sort out the data science part. This course is not real data science, it is basically business intelligence and data analytics. Real data science involves machine learning algorithms and artificial intelligence, which was not at all even mentioned in any aspect of the course. It was more related to SQL, business analytics and statistics etc. The ideal real data science course would have discussed ground-breaking advancements in AI such as deep learning, convolutional neural networks (and other types of neural networks), general AI, etc. Also, the mathematics section of the course had the cohort up in arms. The mathematics lecturer had a PhD in statistics and the content was extremely difficult, and definitely not suitable for this level - I would even argue that it would be at a masters level. The 3x 15% assessments were pretty easy, I ended up with like 90+ in that, but then the finals were brutal (partially because I didn't put much effort into that, but also because of the statistics part of the course being extremely difficult and unsuitable) - I'd hope they'll improve on this after all the criticism received. Overall, do not do this course if you don't need to (e.g. as a gen ed or elective). It is not worth it.",
        "rating": 1.0,
        "grade": "72",
        "termTaken": "2017, sem 2"
      }
    ]
  },
  {
    "course": "ECON1102",
    "reviews": [
      {
        "authorName": "HelpICantThinkOfAName",
        "description": "As someone who's main interest lies in macroeconomics, this was a great introductory course. Most of the time is spent building up to the AD-AS model, by starting in a two-sector economy, then slowly adding inflation, consumption and saving, government spending, international trade, and central bank policies to the model. As long as you can remember how the different sectors interact with each other and the economy as a whole, which is mostly intuitive, then you'll do great! Again, the business school has this annoying habit of forcing students to buy textbooks written by the lecturers in order to pass the course. This textbook isn't quite as fun as micro 1's was, but it's still a good resource to have.",
        "rating": 4.5,
        "grade": "73 CR",
        "termTaken": "2020/T2"
      }
    ]
  },
  {
    "course": "ECON1401",
    "reviews": [
      {
        "authorName": "HelpICantThinkOfAName",
        "description": "Way too much to handle at times, especially for a first-year course. I spent so much time just trying to extend my reflection to reach the word count, which felt like a waste of time when it only made up 20% of my final grade. The assessments need to be urgently rebalanced, a sentiment felt by many others doing this course this term.",
        "rating": 1.0,
        "grade": "88 HD",
        "termTaken": "2021/T1"
      }
    ]
  },
  {
    "course": "ECON2101",
    "reviews": [
      {
        "authorName": "Opengangs",
        "description": "I mainly did this course purely out of economic interest and seeing how this is a fairly math-sy course, I thought it'd be an interesting experience. The course states that you need to put in at least 25 hours per week during the summer but in all honesty, 5 hours is sufficient. The course material is fairly easy to follow and not much from ECON1101 is really required for the course. The course begins with a light introduction to the concept of preferences and builds a mathematical framework into how consumers rank certain choices using the idea of a utility. We then take a detour into the supply side of the market and build similar frameworks to that of the consumers. The last few chapters of the course concerns itself with the relationships between consumers and suppliers (monopoly, game theory and oligopoly). One of my biggest issues with the course is the fact that quiz concepts aren't really taught (whether it's explicitly or implicitly) in the lectures. As a result, we had to make a few wild assumptions (turned out to be the right assumptions) in order to answer the problems. This was quite a frequent experience for a lot of the quiz problems, coupled with the fact that it's primarily graded based on the first attempt and is weighted pretty highly, is a bit concerning. I do like the fact that if we don't get full marks in the first attempt, we can earn 2 marks if we reattempt the quiz and get 100% - I found that to be a really nice added incentive to understand the concepts taught in the quizzes. The extra questions were a bit vague as well -- I struggled to understand what they were trying to ask in the first place. Conceptually wasn't challenging but having to read through a lot of meaningless words was not really my vibe. With the lectures being pre-recorded, I do like the added Q&A sessions and workshop session. Those sessions were really helpful. I also liked the incentive of giving away bonus marks for contributions on Piazza. Teaching others is the best way to learn so having a chance to earn an extra 1% in the course AND learning something new is a win-win in my book. Overall, I wasn't really expecting much with the course. I did it mainly because I wanted to do a bit of economics. There were a few issues here and there, but I think this course has significantly improved since its last offering - at least I think so. Would I recommend it as an elective? Probably not. Do I regret taking it? Ehhh not really. It was certainly an experience. They definitely overestimated the amount of time needed to do well in the course.",
        "rating": 2.5,
        "grade": "74",
        "termTaken": "2021 Summer Term"
      },
      {
        "authorName": "HelpICantThinkOfAName",
        "description": "This has got to be one of the poorest run undergraduate courses in the business school. Under what circumstances would you place a 72% weighting on homework, and only have 8% of that for handwritten submissions? 64% of our grades should not be subject to moodle marking, which doesn't allow for carry-on errors and doesn't give us feedback on our problem-solving. If you're allocating the vast majority of the final grade to homework, put in the effort to properly mark it. It was done fine in ECON2112 last term, so what's the problem? The content of this course is not difficult, most of it just involves setting up functions and maximising them over some domain. The issues arise when crucial topics are only given one or two slides, and when the lecturer only goes through one or two examples every week. Thank goodness I'm not an international student; I can only imagine what they're feeling when they have to pay $5,500 for the knowledge that's taught in three Khan Academy videos. It's such a shame as well. This course has the potential to be really interesting, but just about all of it is wasted. I cannot recommend anyone take this course in its current state.",
        "rating": 0.0,
        "grade": "82 DN",
        "termTaken": "2020/T2"
      }
    ]
  },
  {
    "course": "ECON2102",
    "reviews": [
      {
        "authorName": "HelpICantThinkOfAName",
        "description": "I don't really felt like I learned anything new in this course, which is a sentiment that a few of my friends in the course have also echoed. Most of it boiled down to \"Macro 1 but now we use a bit of calculus instead\". After suffering through Micro 2 last term I expected this course to be much more difficult than it was, especially with the lack of a Macro 3 course. A bit underwhelming, but still an essential core economics course to master.",
        "rating": 3.0,
        "grade": "81 DN",
        "termTaken": "2020/T3"
      }
    ]
  },
  {
    "course": "ECON2112",
    "reviews": [
      {
        "authorName": "HelpICantThinkOfAName",
        "description": "This course only really relies on a few tools techniques that get used and refined over and over again. As long as you understand the content in the first 3 weeks, you should be well prepared to deal with the second half of the course. I suspect that some scaling with the final exam took place, as I don't feel like I earned my final grade after having taken that final.",
        "rating": 4.0,
        "grade": "88 HD",
        "termTaken": "2020/T1"
      }
    ]
  },
  {
    "course": "ECON2127",
    "reviews": [
      {
        "authorName": "HelpICantThinkOfAName",
        "description": "A nice and chill final econ elective to round out an otherwise hectic term. Would recommend to any econ student who is even mildly interested in the subject. I've also heard good things about its little sister ECON1107 (which I think some people doing environment degrees can use as an elective?), so consider that as well.",
        "rating": 5.0,
        "grade": "85 HD",
        "termTaken": "2021/T3"
      }
    ]
  },
  {
    "course": "ECON2206",
    "reviews": [
      {
        "authorName": "HelpICantThinkOfAName",
        "description": "Another essential course for all economics students to master. My only wish is for more Stata materials.",
        "rating": 2.5,
        "grade": "50 PS",
        "termTaken": "2020/T3"
      }
    ]
  },
  {
    "course": "ECON3101",
    "reviews": [
      {
        "authorName": "HelpICantThinkOfAName",
        "description": "This course is a marked improvement over micro 2, but also suffers from some similar failings. Namely the lack of examples done in lectures and tutorials. This time the lectures went much more in-depth with the material than micro 2 did, so it was never really a problem until later into the term, where it would've been nice to have some more concrete mathematics shown. If you like micro or are planning on taking economics honours, this is a course that you can't miss.",
        "rating": 3.0,
        "grade": "86 HD",
        "termTaken": "2021/T2"
      }
    ]
  },
  {
    "course": "ECON3104",
    "reviews": [
      {
        "authorName": "HelpICantThinkOfAName",
        "description": "I never really felt like I was a better mathematician after taking any of my mathematics courses, just better at doing a new calculation/proof. This made me feel like I was a better economist at the end of it. You gain a much greater appreciation for all the ways that international economies interact, how domestic issues affect foreign countries, and so much more. Really interested in doing my econ honours in this area now. If you've got any interest in macro and are competent in algebra, take this course (no calculus involved at all).",
        "rating": 5.0,
        "grade": "81 D",
        "termTaken": "2021/T1"
      }
    ]
  },
  {
    "course": "ECON3106",
    "reviews": [
      {
        "authorName": "HelpICantThinkOfAName",
        "description": "This is such a great course. I wasn't very convinced early on, but the topics flow nicely from one to another, individual preferences lead to social choices, then to lobbying and corruption, political advertising, and conflict. The course cleverly integrates empirical data throughout to reinforce what the theory is saying, and closes with a lecture devoted to exploring empirical data. It's well structured, well-paced, well taught, and well assessed. If you're looking for a third-year economics course that isn't super intense, this is your new best friend.",
        "rating": 5.0,
        "grade": "82 DN",
        "termTaken": "2021/T2"
      }
    ]
  },
  {
    "course": "ECON3121",
    "reviews": [
      {
        "authorName": "HelpICantThinkOfAName",
        "description": "I was kinda bored of this course for most of it if I'm being honest. The first 5 weeks were essentially revision from ECON2112, while the last few were spent extending a few ideas that we'd already touched upon. Not a bad course, but don't expect anything radically different from ECON2112 like I was expecting here.",
        "rating": 3.0,
        "grade": "75 D",
        "termTaken": "2021/T1"
      }
    ]
  },
  {
    "course": "ECON3123",
    "reviews": [
      {
        "authorName": "HelpICantThinkOfAName",
        "description": "This is course should really be called Contract Theory. We spent all of our time investigating interactions between principals and agents (essentially just employers and employees) under different circumstances. Principals will have one set of desired outcomes (maximise profits), and agents have another, often conflicting, set of desired outcomes (maximise pay). The fun of this course comes in playing around the different times that the principals and agents make moves, how the principal pays the agent, and how the agent produces the good. I found the weeks spent on Asset Ownership and Career Incentives to be particularly interesting because of how fun it was to keep track of all the different variables and timings that were introduced. There are a couple of weeks in the middle that I thought were a bit of a slog - the lectures on Performance Evaluation, Teamwork, Incentives, and Authority. They each took me a while to understand the underlying interaction, but I can't say that I'm very comfortable with them. Overall, this is a pretty fun course. I wouldn't recommend that you take this over courses like ECON3106 or ECON3121 though. Aaaand that's it for my undergrad degree! It's been a great ride for the last four years at UNSW, even with the chaos of 2020 and 2021. I hope that my course reviews have been comprehensible and useful for everyone who has read them. I might be doing econ honours next year, so keep an eye out for a review on that at the end of next year if I'm not burnt out at the end. Thanks everyone!",
        "rating": 3.0,
        "grade": "75 DN",
        "termTaken": "2021/T3"
      }
    ]
  },
  {
    "course": "ECON3202",
    "reviews": [
      {
        "authorName": "HelpICantThinkOfAName",
        "description": "This should be a math major's gen-ed of choice.",
        "rating": 5.0,
        "grade": "HD",
        "termTaken": "2020/T1"
      }
    ]
  },
  {
    "course": "ECON3208",
    "reviews": [
      {
        "authorName": "HelpICantThinkOfAName",
        "description": "A lot of statistics courses get (deservedly in my opinion) a bad rap for being deliberately obfuscatory and hard to follow. I can't really say the same about this course. Sure, it still has difficult content that takes time to wrap your head around, but it never felt like there was a need for the big conceptual leaps and blind acceptances of theorems that I felt were present in ECON2206. This course doesn't hold your hand, but it takes time exploring the big ideas before launching into a more in-depth exploration of the topics. This course is essentially an extension to ECON2206, where you spend most of your time patching up the holes left behind by that course. Most of the lectures start with the premise of \"here's something wrong with a particular regression, how can we fix it?\", and then take a very logical path in ruling out what can and can't be done to fix that issue. This resulted in a course that felt a bit disjointed and lacking an identity of its own - you're constantly going back and forward between issue and solution, and not really considering if that solution would bring any issues as well.",
        "rating": 3.0,
        "grade": "71 CR",
        "termTaken": "2021/T3"
      }
    ]
  },
  {
    "course": "EDST1101",
    "reviews": [
      {
        "authorName": "blasonduo",
        "description": "Out of the first year education courses, this is by far my favourite, the content in the course is really interesting. The tutorials did seem like a cop out though, with each group presenting a topic as an assessment, which meant we are mainly reliant on other people in the tutorial to explain the concepts for us. Although our tutors would include anything that was not mentioned, my tutor seemed like they weren't 100% sure on what they are trying to explain. It mainly felt like a waste of time and a lazy way in making the students learn the content. With only one of the assessments being an essay, I found the assessments much easier than normal, (since I find exams and presentations easier to get good marks in) which really helped in my ridiculously high mark. The exams were mainly multiple choice, which made it much easier to get marks, as the questions rarely ever try to trick you, but more to see if you have a basic understanding of a certain concept. Even with the essay, the essay didn't demand vague questions to be answered (like 1108) and was also not bad to complete. The actual content of the course was actually very interesting and very basic, talking about Long term memory and Working memory for the majority of the course. It includes methods to increase capacity of both and then to sum up with educational implications of these. There were other things like the visual sketchpad, but those are the main concepts, which aren't that difficult. However in a 2 hour lecture, can become a bore.",
        "rating": 3.4,
        "grade": "92 HD",
        "termTaken": "2018 Semester 2"
      }
    ]
  },
  {
    "course": "EDST1104",
    "reviews": [
      {
        "authorName": "blasonduo",
        "description": "This course was kind of all over the place; it didn't feel like a course that was caring. Their communication skills would vastly improve the overall quality of the course. The staff almost never answered questions on the courses question forum, out of the 34 different questions asked during the semester, 3 of them got responded to by staff. This was very lazy of them and annoyed the cohort, we felt lost. Although the feedback in assignments wasn't actually that bad, it never gave me a defining explanation on what to improve on for the next task (like 1108 did). The worst part of it all was the dates in which we",
        "rating": 1.2,
        "grade": "68 CR",
        "termTaken": "2018 Semester 1"
      },
      {
        "authorName": "katie,rinos",
        "description": "I went into education really excited and found this course to be boring and a bit of a letdown. Though some of the information we learnt was important (topics such as inequalities, geographies of schooling and special needs), I felt like I\u0092d already seen it happen only last year at school. I zoned out a lot during lectures, and the lecturer read from the slides which didn\u0092t help. There was a lot of help with assessments so they weren\u0092t as daunting as they could have been. The education society ran workshops for each assessment that you could attend if you needed help, and also posted the slides on a Facebook group afterwards. The assessments were also discussed in detail in the tutes and lectures.",
        "rating": 2.5,
        "grade": "76 D",
        "termTaken": "2018/1"
      }
    ]
  },
  {
    "course": "EDST1108",
    "reviews": [
      {
        "authorName": "blasonduo",
        "description": "This is a difficult course, the fail rate is high, and this is only because you do not get told what you need to do for the assignments, you are left in the dark. As for the content itself, it's not difficult, only implementing it in a resourceful way in the future, makes it difficult. Apart from the vagueness in the assessments, most of the time, they would answer questions on the forum. Out of the 56 different questions, 52 were responded to by staff. The feedback in the assessments was impeccable, the critique and feedback were extremely useful, and it was shown that extra time was utilised to help us as much as possible. The lectures were very repetitive imo, although the content was different, it continuously directed onto the same couple of points. The lecturer was",
        "rating": 2.4,
        "grade": "58 PS",
        "termTaken": "2018 Semester 1"
      }
    ]
  },
  {
    "course": "EDST2003",
    "reviews": [
      {
        "authorName": "katie,rinos",
        "description": "This course felt a lot more relevant to actually teaching, than the first year courses that I did last year. While the lecturers and tutors tried to make it interesting (we often had kahoots and videos almost every week), it often felt like a bludge. There were times when I was doing work for another subject, or would just zone out halfway through the lecture. I really enjoyed both of the assignments and didn\u0092t find them too difficult to do. The 2nd one was about making a lesson plan and analysing the strengths in relation to the course-and was relevant to our future teaching practises. I also felt like I had a lot of time in tutorials to go over both assignments so I knew what was expected of us (we had 2 weeks just to work on our 2nd assignment and ask questions).",
        "rating": 3.0,
        "grade": "76 D",
        "termTaken": "Unknown"
      },
      {
        "authorName": "blasonduo",
        "description": "This is a pretty laidback course, pretty straight forward, but a vital course for the degree in my opinion. As with all the previous courses, the lectures and tutorials felt extremely bludge like, and it's compulsory nature led to me doing other courses during this time. The readings were vital, and in my opinion were the best part of the content, very challenging and informative! The assignments were suitable for the course, and I really enjoyed the second one, where we've been introduced to aspects of lesson plans, and also made us identify the strengths in our plan with content learnt in the course. It's a fantastic introduction to the actual applications of teaching, something that was missing in first-year education courses. Overall, a pretty easy course, but the face to face aspects were lacking, but the assignments and readings were great.",
        "rating": 3.1,
        "grade": "79 DN",
        "termTaken": "2019 Term 1"
      }
    ]
  },
  {
    "course": "EDST2044",
    "reviews": [
      {
        "authorName": "blasonduo",
        "description": "I'm honestly surprised this course is an elective because there were many times where the content presented would've been extremely valuable for highschool classrooms. Motivation is one of the underlying aspects of learning, and the course had many different activities students could undertake to improve motivation, including the underlying theories behind them. The content is pretty interesting! The first assessment was really straight forward and pretty easy, mainly reflecting on how your past experiences utilised motivational theories discussed in the course, and how to use them in the future, easy marks and the workload here wasn't too big. However, there was a huge contrast when the second assessment came around. It was extremely useful for the future, but it took forever to complete. The assessment overall took me 3500 words, with 2 lesson plans, explanations on those lesson plans, and analysis of them. The number of other articles you had to read before tackling the assignment took forever. This assessment, although extremely long, is extremely useful for when we enter the classroom environment. The lectures, so far in my education journey have been my favourite (luckily). It as if they were practising their teachings! The lectures were engaging and relevant. The only downside is the fact that as with all EDST courses, the lectures didn't need to be 2 hours (however for this course, it was the closest to actually achieving this)",
        "rating": 3.3,
        "grade": "78 DN",
        "termTaken": "2019 Term 2"
      }
    ]
  },
  {
    "course": "EDST2091",
    "reviews": [
      {
        "authorName": "katie,rinos",
        "description": "I did this course as my education elective and it was a really small class (less than 20). Because of this, our lectures were a lot more interactive then a normal education class and included group work. Although our lectures sometimes dragged on, our lecturer seemed to really know and understand the content (she works with technology in the department of education so was able to make connections between tools and how we could use them well!). Throughout the term, we learnt a lot of new skills and tools that we could incorporate into our own classes. As expected, most of this class transitioned online really well. Sandy taught us how to use blackboard collaborate and there weren\u0092t too many issues. However, we had 2 group assignments that were difficult to do as the course went online. One was a group presentation based on a reading (which needed interactive elements), the other a group Webquest. I found it really difficult to keep group members accountable (because we weren\u0092t seeing them in person), and my internet was hardly working before the presentation (which was really stressful). The assessments for this course were fairly chill. It all culminated in a final education/teacher website with 8 different sections. None of it was hugely academic so although I needed to work out how to use google sites, they didn\u0092t take up as long as some of my other assignments. As part of this, we needed to get an education based twitter and Pinterest account and make 5 posts. For reference this was my website.",
        "rating": 4.0,
        "grade": "73 CR",
        "termTaken": "Unknown"
      }
    ]
  },
  {
    "course": "EDST4080",
    "reviews": [
      {
        "authorName": "blasonduo",
        "description": "This course was pretty standard run-of-the-mill type of education course. It wasn't really lacking in anything like the majority of the first year education, but it also had nothing in it that made it shine. As sad as it is to say this, every time we had a guest lecturer for our lectures, those were the ones that were by far the best in terms of content and how it was being presented. Like all EDST lectures, it is simply a 2 hour block of the lecturer where we listen. The content presented in these lectures though has been one of the more valuable ones so far. The content discusses a variety of disabilities that we are likely to encounter in the teaching world and the harsh realities this poses on the student and the learning environment. It gets you thinking about how your plans as a teacher might change to accommodate for these students. The tutorials were pretty garbage though. I do mainly blame the online aspect to it, but every tutorial went like this: short recap of lecture -> breakout groups of 4-5 people to do a task -> everyone presents to the class. SUPER repetitive, and it's just a roll of the dice to see if you have good breakout partners or not. It was very awkward and I hated doing these. I found the assessments alright at best, for the first one, you are given a really good resource, and following that same format as that is bound to give you good marks. A pretty simple assessment Assessment 2 was a doozy though. It had requirements to be user friendly, neat and creative. I do not do well with these, and as a result, my mark took a hit to this. My booklet ended up being 27 PAGES long, so if you're doing this course, get onto that assignment early, it's a big one.",
        "rating": 2.5,
        "grade": "82 DN",
        "termTaken": "2020 T2"
      }
    ]
  },
  {
    "course": "ELEC2117",
    "reviews": [
      {
        "authorName": "Jack89",
        "description": "Overall, this is a very useful course where you learn to build practical circuits using a microcontroller. This course is all about programming the PIC16F886 microcontroller, which is in assembly language. That's why I recommend taking ELEC2142 beforehand (you learn assembly in 2142), because this course just chucks you in the deep end, so having no knowledge of assembly beforehand means you have to learn it pretty quickly, which is not impossible but not desirable in my opinion. Chamith is very knowledgeable so he teaches the content pretty well. The first 5 weeks are lab work; writing programs to make LED patterns, multiplex seven segment displays, program a keypad, and display characters on an LCD screen. These labs are very important to complete because they make up the subsystems for the final design project. Our final design project was building a tuneable FM radio, using an RF module, LCD for station display, and keypad to select preset/seek/mute. This was incredibly fun to work on - but because it was done in assembly, the code was close to 1000 lines. We only had 4 weeks to complete the project because of trimesters - previous years had the midsem break PLUS 7 weeks to work on this project, so more time would have been good, especially with other subjects having midsems/projects at the same time. The midsem was okay, and the final exam was a bit challenging.",
        "rating": 4.0,
        "grade": "98 HD",
        "termTaken": "2019/1"
      }
    ]
  },
  {
    "course": "ELEC2133",
    "reviews": [
      {
        "authorName": "jamonwindeyer",
        "description": "This was an extremely difficult course for me, even with what I believe to be a strong underlying knowledge of the basics of circuit analysis. The laboratories seemed really unorganised - The demonstrators contradicted each other and the lecturer in the answers they obtained and how they obtained them. I don't feel I was taught the content effectively in lectures; the lecturer did not explain things well (in my opinion, obviously) and did not do enough exam style scenarios - Only a combination of tutorial work and",
        "rating": 1.5,
        "grade": "85 HD",
        "termTaken": "2016/2"
      }
    ]
  },
  {
    "course": "ELEC2141",
    "reviews": [
      {
        "authorName": "Jack89",
        "description": "Overall a good course that introduces Boolean logic, sequential circuits, verilog code, CMOS gates and the basics of computer hardware right at the end. Sequential circuits take a bit of getting used to but they aren't too difficult. The assignments, especially assignment 2, are quite challenging but fun and rewarding and very very beneficial to understanding the course content. The labs are quite long and the last couple are very challenging - make sure to prepare well before otherwise you'll lose marks for going over time. The program they use, Xilinx, was a bit of a headache since there were two versions on the computers and if you open your lab work with the wrong version then it screws it up. As part of marking, the lab demos sometimes ask you very specific questions about the lab, but they're quite lenient with the marking. The midsem and final were nice and balanced.",
        "rating": 4.0,
        "grade": "95 HD",
        "termTaken": "Unknown"
      }
    ]
  },
  {
    "course": "ELEC3104",
    "reviews": [
      {
        "authorName": "Jack89",
        "description": "This course was very interesting and expanded a lot upon the Fourier Transform dealt with in ELEC2134, but deals with discrete-time Fourier transforms and discrete Fourier transforms for digital systems. The Z-transform is also taught, and you'll be surprised at just how extensive it is used in DSP, and also how it's related to the Fourier Transform. There are a lot of intense mathematical proofs but they are quite elegant when you see all the nice results come out in the end. Digital filters are also a large part of this course. I liked this part as you can immediately see the real-world applications especially in audio and speech processing. The tutorial-lab sheets require extensive use of MATLAB to design all sorts of filters and digital systems, and give a good insight into what DSP engineers do. MATLAB is a very useful skill to have so I particularly enjoyed the labs. The 5% online quizzes were extremely tough and answers had to be typed in; there were no partial marks so many marks could be lost here. The project was very long but quite enjoyable and honestly very useful in terms of real-world applications. Since there are no actual tutorials that go through problem sets, it was very hard to gauge what type of questions could be asked in the final; the final exam was exceptionally difficult and long but in an electrical engineering degree these sorts of exams are to be expected.",
        "rating": 4.0,
        "grade": "93 HD",
        "termTaken": "2019/1"
      },
      {
        "authorName": "jamonwindeyer",
        "description": "This is the first course in Digital Signal Processing that you can take, and it's a prereq for all the 4th year DSP courses. This is a really, really interesting course, and if you put the work in super enjoyable! Project is fun and lets you do as much as you can handle (you can do a little bit and pass easily, or do a heap of work to try and scape out the full mark). Labs are really long but good, overall - Wish they'd do more to teach you the sorts of questions you'd get in the final though. Lecturer is good, explains stuff well, but could really do with some slides/notes to guide his explanations. Hard to know what the important stuff is sometimes - Very few lecturers can get away with just scribbling on a document camera for 2 hours and he probably isn't one of them. That said, put a bit of work in yourself and he'll give you the ins and outs nicely This is a mandatory course for Electrical Engineers, and it's a good one. Get ready for lots and lots and LOTS of coding in Matlab (it is criminal that they don't really have you do much properly with it until this point)",
        "rating": 5.0,
        "grade": "83 DN",
        "termTaken": "2017/1"
      }
    ]
  },
  {
    "course": "ELEC3115",
    "reviews": [
      {
        "authorName": "Jack89",
        "description": "The content in this course was fantastic - very interesting and a lot of real world applications. The first half deals with low frequency electromagnetics. The topics include capacitance, transmission cables, electrostatic problems, magnetic circuits and transformers. It's essentially a continuation of the first half of PHYS1231. I strongly recommend going through MATH2069 before the start of the course too - especially line integrals, Stoke's theorem, Divergence theorem, grad, divergence, curl, and cylindrical coordinates. These are used extensively in part A so know them well. Solving electrostatic problems was the hardest part of the course; those 2D laplacians are a nightmare to solve. Thankfully they didn't crop up in the final. The second half deals with high frequency electromagnetics. This is quite new content that doesn't continue from PHYS1231. The main topics are wave propagation through transmission lines, Smith Charts and waveguides. Smith Charts are fun to use once you get the hang of them. Rukmi did lots of worked examples for us in lectures and her explanations are pretty good. King Yuk Chan was good as well - he used the document camera a lot which I liked, we could see him actually derive equations for us which I found useful for understanding. This course is normally renowned for being quite tough, though I'd say that part A is definitely harder and larger than part B. Each part had a midsession test, both were okay as long you study a bit for them. The labs were long but doable - lab demos weren't great though. The final was also well balanced.",
        "rating": 4.5,
        "grade": "98 HD",
        "termTaken": "2019/1"
      }
    ]
  },
  {
    "course": "ELEC3117",
    "reviews": [
      {
        "authorName": "jamonwindeyer",
        "description": "So this is the course you take as a prerequisite for doing your Thesis in Year 4 - It's a big design project. You pick a partner, and you build a consumer product prototype. No real assistance, no restrictions. The project itself is really difficult because, I don't care if you got 90+ scores in every electronics course so far, that doesn't teach you how to design something. You need to be able to program a microcontroller, design a PCB, do stuff that no course teaches you (and this course won't either). That's my biggest criticism of this course - It would be the chance to have industry professionals come in and teach you things you'll actually use, introduce",
        "rating": 3.0,
        "grade": "91 HD",
        "termTaken": "2017/2"
      }
    ]
  },
  {
    "course": "FINS1613",
    "reviews": [
      {
        "authorName": "RuiAce",
        "description": "This course is one of the choices for the first year electives of all commerce students. This course introduces students to the bread-and-butter of finance and makes up the fundamentals of everything in the finance major. It becomes a core course for actuarial students to fulfil CT2. This course was ridiculously easy for me given that I had undertaken ACTL1101 in advance. Most actuaries are aware that taking this course before FINS1613 makes it significantly easier than otherwise, and hence the bias in the difficulty rating. For many students, this course tends to achieve a difficulty of 4/5 as they are either not well versed with maths equivalent to 2U level, understanding of how multiple cash flows work or feel bombarded by the lengthiness of several questions. This course does not neglect theory altogether, however the focus is on the calculations. FINS1612 (only required by finance majors) introduces more theoretical concepts. It is imperative that students understand quickly what goes on in the first few weeks of the course as everything is somehow tied to it. Topic 3 (Capital budgeting) is notorious for being the hardest of the lot; students who are currently taking (or have previously taken) ACCT1501 find it slightly easier, withs students having taken ACCT1511 finding it a breeze as it's just ACCT1511 dumbed down.",
        "rating": 4.5,
        "grade": "94 HD",
        "termTaken": "2017/1"
      }
    ]
  },
  {
    "course": "MATH1041",
    "reviews": [
      {
        "authorName": "Opengangs",
        "description": "I did this course purely because it was going to be a WAM boost but I'm disheartened by a few things from this course. My biggest complaint is the assignment. I'll get to that in a bit. The course serves to be one of two math-intensive courses for people doing a life science degree, the other being MATH1031 which is more akin to the content you find on MATH1131. MATH1041 is an introductory course on statistical practices for people who may not want to do any more mathematics courses beyond this course. For the most part, the course was just revision from when I took MATH2901 and a lot of the content felt very familiar to me. You learn about the basic probability theory principles as well as the basic statistical inferences that permeate any statistics major (confidence interval, hypothesis testing, inferences about the mean). The midterm was also really nice, we were given enough practice to perform well in the test and it felt like a nice 15% to get. The tutorials felt very dry and I felt that the tutors didn't want to be there (or at least I got that energy from them), which made me not want to go to the tutorials. Then came the assignment. The assignment was convoluted and long, I felt like I was answering the same question 3 or so times. I was confused a lot of the times because the questions were worded awkwardly and left a lot of room for interpretation. When anyone tried to clarify a question, the answers were always the same: You're being assessed on it . When addressing a missing unit in the assignment, the lecturers didn't bother making a public announcement. Instead they simply left a comment in the thread that was so difficult to find because it was so hidden among the other questions that arose from the assignment. As a result, I had to redo one of the graphs because I realised oh there WAS a unit attached . I felt that, if we got marked down for it, there would be some major complaints. The marking was a bit controversial as well. A lot of assumptions that were not made clear from the assignment specifications were vital to how you were supposed to answer. This made the assignment even more frustrating to do. There were parts of the sample answer that I was not happy with and it felt like the markers were rushing to get marking done. Losing full marks for small errors should never be permitted.",
        "rating": 2.0,
        "grade": "85 HD",
        "termTaken": "2021, Term 2"
      }
    ]
  },
  {
    "course": "MATH1081",
    "reviews": [
      {
        "authorName": "fun_jirachi",
        "description": "Loved this course. Only a 4.5/5 because no course is perfect, especially online (also given that i don't really know what a perfect course is right now given my inexperience) - but it does its best by setting clear goals each week to complete and stepping through content clearly. Only dodgy part was probably the online testing media (maple and numbas go brrrr). Also, brilliant lecturer , could listen all day and wasn't just a quality lecturer but also a quality person - it is quite literally impossible to get lost doing this course even if you're not too confident in your maths if you have David. The course content was interesting, and while doing enrichment courses in high school or outside of school may introduce you to some of these ideas, they're rather abstract and great to follow given there's no first-year course that tackles this content. As long as you don't have pretentious people who already know a lot of this stuff (ie. ideas from computing, pre-learning, learnt before in high school etc.) busting down tutors or technology blowing up in your face, 100% enjoyment guaranteed",
        "rating": 4.5,
        "grade": "90 HD",
        "termTaken": "2020 T2"
      },
      {
        "authorName": "kierisuizahn",
        "description": "My favourite first year maths course. The content is often interesting and some of the harder questions are really interesting (they're also more common than the harder questions in MATH1141 and MATH1241). I didn't go to lectures, so I can't comment on the lecturers, but the course material is mostly sufficient anyway. The notes on combinatorics are kind of all over the place though. It would be nice if more problems were in the problem set, for more practice, but there are multiple questions in the lecture notes you can turn into exercises for extra practice. The course focuses on making you think like a mathematician, rather than solve problems simply, so the questions are more conceptually difficult, which I know many people struggle with, but is certainly more fun for a purist like me. The graph theory topic is also very applicable to CS (specifically COMP2521), and I definitely recommend this course.",
        "rating": 4.0,
        "grade": "95 HD",
        "termTaken": "2017 S2"
      },
      {
        "authorName": "RuiAce",
        "description": "Unlike MATH1xx1, success in high school mathematics has generally no impact whatsoever on success in this course. The course places an emphasis on clarity in mathematics, requiring far more carefulness with setting out proofs, as well as the more computational and algorithmic side of mathematics. Whilst students majoring in mathematics need to take this course, the main focus is therefore to people studying a degree offered by the school of CSE. Abstractness is essentially the same as for linear algebra, but in a different manner. Whilst some computer scientists are still hammered down by this course, in general they like it TREMENDOUSLY more to how they feel about MATH1xx1. The course is designed to be more friendly towards them. The huge weighting on the final exam speaks for itself; consistency is key but relatively speaking, a greater focus towards the end will be required here. This course, on the other hand, sometimes hammers down on people who are good at maths otherwise. It is nonetheless a 'fun' course to take, and many interesting things are taught here, which usefulness is far more than what meets the eye.",
        "rating": 5.0,
        "grade": "91 HD",
        "termTaken": "2016/2"
      }
    ]
  },
  {
    "course": "MATH1141",
    "reviews": [
      {
        "authorName": "fun_jirachi",
        "description": "A lot of the course is spent on filling gaps and relearning stuff from high school, as well as introducing a lot of concepts which were taken for granted but were intuitively true anyway. This course will probably begin to get easier for incoming students with the introduction of vectors to X2 in high school - perhaps causing a few to switch off, which is not something that is recommended. The new content came with the varying applications of such 'gap-filling' theorems and content post-week 6-8 - which was a bit disappointing because I really wanted to learn new stuff after going into uni. However, it was well-taught and interesting, thus warranting its 3/5 rating",
        "rating": 3.0,
        "grade": "H",
        "termTaken": "T1 2020"
      },
      {
        "authorName": "kierisuizahn",
        "description": "Much of the content in the calculus half is revision or expansion on things taught in HSC Maths Ex1 and Ex2. The algebra content is mostly new, and generally brought the most conceptual difficulty to the course and final exam. The harder questions in the final exam make up the bulk of the interest in the course and difficulty overall, but they're so sparse that it's a pretty easy course overall. Past exams and the problems in the course notes are a must - the more of them you do, the better you will go.",
        "rating": 4.0,
        "grade": "95 HD",
        "termTaken": "2017 S1"
      },
      {
        "authorName": "Mechonics",
        "description": "Very enjoyable course. It is split into two parts, Linear Algebra and Calculus. Your final mark pretty much entirely depends on the 60% finals. The remaining 40% is pretty much all free marks. You will have a total of 12 online maple tutorials - one each week. Your best 8 will count to give you 8% of the course marks. These tutorials are very easy and you're allowed to check your answer before submitting it (There's literally a \"How did I go\" button which you can exploit an infinite number of times). Try and do a tutorial every week to finish all 12, as they can be pretty helpful. However, worst case scenario you can skip 4 weeks of work and still get full marks if you complete 8/12 of them. Make sure you get all 8% of these free marks. There will be a 4 class tests throughout the semester. They are very short tests - you are given 20 minutes and there are 10 marks in each test. The first test is in like week 5 and the remaining are evenly distributed throughout the rest of the semester. These are very very easy tests and very similar to the past tests that are provided at the very back of your course pack. If you do them all (or even a few), you should be getting 10/10 for every test. Your best 3/4 class tests will be counted. i.e. each of your best 3 tests are worth 6.6666..% to give a total of 20% of the course. Make sure you get all 20% course marks here! There will be a maple lab test in around week 10. It will test your understanding of the Maple software, which is used to perform many mathematical calculations. Here is a list of literally every possible question that can come - https://www.scribd.com/document/156497903/1131-and-1141-Maple-Exam-Sample-Solutions . They will choose some of these (not all) for your final exam. Make sure you memorise these (it's not hard, very repetitive). I started memorising the night before the test and got full marks, it's a very easy test - don't lose any of the 8% here. 4% of the remaining marks will come from 2 very simple and short maple practice questions (worth 2% each). These two tests will test your understanding of the maple syntax. There are only two questions in each test, and it is done online. You'll need to use the maple software to enter your answers. Each test should only take you like literally 5 mins at max, so don't put this off. The remaining 60% of the marks is from final exams. These are harder than the normal class tests you do, so don't get complacent. I got all 40% of the course marks above easily, and underestimated the finals. That's why I only got a total of 76. Study very hard for the final exam, do all the past papers you possibly can do, and get an easy HD!",
        "rating": 4.0,
        "grade": "76",
        "termTaken": "2017 Sem 1"
      }
    ]
  },
  {
    "course": "MATH1151",
    "reviews": [
      {
        "authorName": "RuiAce",
        "description": "Functionally similar to MATH1131/41, taken by science and engineering students, this course is designed in an altered and heavier format to target students taking the mathematically intense degree of actuarial studies. Difficulty is around the same as MATH1141. The aim of first year first semester mathematics is to formalise many of the concepts just arbitrarily introduced in high school. Whilst it is possible for any exceptional mathematics student to perform well, many struggle to attain HD due to the sudden spike in abstractness in mathematics. The lecturers do look for places to give you marks, however become far more nitpicky with things like quoting the correct theorem, and setting out your proofs in a more presentable manner. Can be a struggle dealing with this course at times - lots of number crunching in algebra, and lots of cautious setting out in calculus.",
        "rating": 4.5,
        "grade": "90 HD",
        "termTaken": "2016/1"
      }
    ]
  },
  {
    "course": "MATH1241",
    "reviews": [
      {
        "authorName": "fun_jirachi",
        "description": "An honestly more enjoyable follow up to MATH1141. While the small stats intro felt a little incomplete and rushed, and while the online stuff felt really dodgy, the course content was cool and it was taught really well. Having David for yet another subject was <3 wow absolutely amazing and Alessandro's pre-lecture playlist was absolute fire (really made online learning that bit better). The course wasn't difficult in itself - it was probably made a lot harder given motivational issues. Relatively standard course otherwise (especially being a mandatory course) - not much else to say.",
        "rating": 4.0,
        "grade": "90 HD",
        "termTaken": "2020 T2"
      },
      {
        "authorName": "kierisuizahn",
        "description": "Very similar to how MATH1141 is run, but some more interesting content (specifically integral and series convergence). I didn't attend lectures so I can't comment on lecturers, but the course notes covered the content to a good depth anyway, just as with the MATH1141 course notes. The number of questions in the course notes is sufficient. Most of the difficulty is from the sequence and series topic from calculus, and the algebra content is pretty easy overall. A good foundation for the second year courses, but sort of dry barring the few interesting questions in the final.",
        "rating": 3.0,
        "grade": "95 HD",
        "termTaken": "2017 S2"
      }
    ]
  },
  {
    "course": "MATH1251",
    "reviews": [
      {
        "authorName": "RuiAce",
        "description": "Same as first paragraph of MATH1151, albeit now with MATH1231/41. Note that MATH1251 learn two topics that the other two courses do not - functions of several variables, and double integrals The aim of first year second semester mathematics is to take the now formalised concepts and start applying them to methods in mathematics. The shift in emphasis has resulted in a trend that students finding this course easier than the previous (however definitely not always the case). Only some knowledge of MATH1151 calculus is required for MATH1251 calculus, but all the algebra (excluding probability - used in ACTL1101) should be known here. A step up in abstraction occurs in algebra, but a step down happens in calculus.",
        "rating": 4.5,
        "grade": "90 HD",
        "termTaken": "2016/2"
      }
    ]
  },
  {
    "course": "MATH2221",
    "reviews": [
      {
        "authorName": "RuiAce",
        "description": "This is one of the level 2 core courses required as part of a mathematics major. For statistics majors, students have the choice of picking between this, and MATH2521/2621 (complex analysis). Differential equations are something students are very accustomed to from first year; they're essentially just trying to find a function that satisfies an equation, which somehow relates the function to its own derivatives. (Can of course, be higher than the first derivative.) This course does introduce significantly more techniques than in first year. This course is introduced as a toolbox course (which, I note throws off many pure-math wired students). As with every math course, some element of proof is required. But the main focus of this course is in applying various techniques taught to finding/constructing solutions (or solution representations) to differential equations. For the most part, this course is therefore computational. They try to minimise it in this course, but every once in a while the ability to handle demanding algebraic computations becomes important. But of course, in terms of computations, what they emphasise on is how well you know the techniques. I saw pretty much every technique get examined (power series, reduction of order, variation of parameters in the assignment, Sturm-Liouville theory, formally self adjoint operators, dynamical systems, Steklov eigenpairs, ...). The course is absolutely crucial to applied mathematics majors. Anyone considering applied mathematics is strongly advised to take this course in second year, as it is a prerequisite for several level 3 applied courses. The workshops were basically the assignments as far as I was aware. I think they were renamed just to emphasise the peer review component of it. Which wasn't too bad, in the grand scheme of things. I was originally going to give this course a 4/5 for the content, but then Jan actually boiled the egg in class this year. That was a 0.5 rating in itself. (Students that will take/have taken the course will know what I mean here.)",
        "rating": 4.5,
        "grade": "97 HD",
        "termTaken": "20T2"
      },
      {
        "authorName": "kierisuizahn",
        "description": "For a course I thought I'd hate, it was actually quite interesting. The course was quite computational, but Dr. Zika went into quite a bit of depth behind all the concept we learnt, and was very helpful during tutorials. The more conceptual questions were very nice (just like the theoretical vector calculus questions he wrote in the MATH2111 final), and a lot of \"advanced\" questions in the tutorial problems showed the applications of what we learnt, while also posing more challenging problems. As a lecturer, I found Dr. Zika to be good, especially if you like explanations through examples. Some of the conditions required in the statements of theorems were annoying to remember, but otherwise it was a pretty easy course, and a lot more fun than I had thought it would be.",
        "rating": 3.0,
        "grade": "97 HD",
        "termTaken": "2018 S2"
      }
    ]
  },
  {
    "course": "MATH2400",
    "reviews": [
      {
        "authorName": "Opengangs",
        "description": "I didn't have to do this course but it ended up being one of my favourite courses this term. The course has given me a new profound appreciation towards MATH3711. The course goes through a lot of the abstract algebra concepts you would find in a course like MATH3711 without getting bogged down in the details of proofs. (Don't worry, there are proofs in the course but the focus is more on the applications of the concepts). Think of it as an introductory course to algebra and not the algebra you find in high school! The course is designed to be taken alongside MATH2859 (hence, the 3UOC instead of the normal 6UOC). Don't get confused between 3UOC and the workload however! The workload is about the same as a normal 6UOC course and you should treat it as such. The first half of the course is a revision of the number theory components of MATH1081. You revisit concepts such as the Euclidean Algorithm and divisibility. You then cover other algebraic structures such as groups, (commutative) rings and fields which become an integral part of the second half of the course (coding and information theory). So if you enjoyed modular arithmetic in MATH1081, this is a great follow up course for you to do! On the other hand, if you enjoyed MATH3411 and want to do a bit more on coding theory, then this course is also a great course for you!",
        "rating": 4.5,
        "grade": "97 HD",
        "termTaken": "2021, Term 2"
      }
    ]
  },
  {
    "course": "MATH2521",
    "reviews": [
      {
        "authorName": "HelpICantThinkOfAName",
        "description": "I found this to be the easiest second-year core mathematics subject, which I'm sure many of my fellow math majors will disagree with. I never felt like I was getting far behind in it, and much of the courses revolves around simplifying calculations and processes that were introduced in first-year mathematics. Overall an enjoyable and not super intense course.",
        "rating": 4.0,
        "grade": "76 DN",
        "termTaken": "2019/T3"
      }
    ]
  },
  {
    "course": "MATH2601",
    "reviews": [
      {
        "authorName": "fun_jirachi",
        "description": "It's really hard to screw up a course like this, which makes the above review somewhat more scathing. The assessment structure was exactly what you'd like (can't complain really, any Mobius element was supposed to be free marks, which works for most people), class tests actually testing people. The course content makes you go 'oh, that's pretty cool' occasionally but often regresses to a love/hate dichotomy. In a lot of ways, I could get away with copy-pasting the first paragraph of review from last term on MATH2111. Also, while the prerecorded lectures allowed for flexibility, they were often really dry. There's not really a lot to say since this is a compulsory course and was definitely a stock standard maths course. Special shoutout to David Angell who took my tutorial, absolute treasure to UNSW maths and stats and made the experience that much better",
        "rating": 3.0,
        "grade": "83 DN",
        "termTaken": "21T2"
      },
      {
        "authorName": "kierisuizahn",
        "description": "A very proof-based course, which was a nice change of pace, though there were a few computation-heavy parts (Jordan forms and SVD namely). Dr. Angell was a great lecturer, and really got you engaged in the content. The tutorials were flipped-classroom style, and provided valuable feedback on proof style and coherency. Even with the computationally-heavy parts of the course, it was very interesting, and some parts were a nice challenge. Although not a prerequisite, a fair portion of MATH1081 proofs topic is used. Would recommend this course to anyone who enjoyed the conceptual proofs in MATH1241 , or someone looking to develop their mathematical problem solving skills.",
        "rating": 4.0,
        "grade": "96 HD",
        "termTaken": "2018 S1"
      },
      {
        "authorName": "RuiAce",
        "description": "This is one of the three compulsory Level 2 courses to all mathematics disciplines, offered in semester 1. It is the higher counterpart of MATH2501. Students intending to major in mathematics and statistics must take this course or the standard version. This course is the first of many that emphasises the nature of",
        "rating": 4.0,
        "grade": "94 HD",
        "termTaken": "2017/1"
      }
    ]
  },
  {
    "course": "MATH2621",
    "reviews": [
      {
        "authorName": "fun_jirachi",
        "description": "I can only really criticise this course for its annoying timetabling, and that's being *really* nitpicky. Ridiculously good course. The exams were fair and well structured (both the exams themselves and the assessment structure overall [see assessments]), the teaching couldn't be faulted and the content was brilliant. When you talk about maths clicking in a satisfying manner, this is definitely it. To find topics that get tied up as elegantly as the ones covered in this course has been somewhat rare so far, and has been much appreciated this term. Up there with one of the best courses I've taken, full stop; pick anything in the course and you could probably find at least three things great about it. Not much else to say, except just take this course if willing and able.",
        "rating": 4.5,
        "grade": "91 HD",
        "termTaken": "21T3"
      },
      {
        "authorName": "anomalous",
        "description": "An interesting course, but also a bit hard this term all things considered. I\u0092ll reiterate what other reviews have already mentioned to say that the theorems and results in this course are as technical as they are surprising, so they take some time to sink in. If you\u0092re an integration junkie, then you\u0092ll probably love the end of this course where you learn some neat tools to tackle hard real integrals using complex methods. The difficulty of this course during the term was pretty tame but spiked significantly at exam time, with our final being a bit of a killer. Why this course loses 1 point in rating is because it could be improved content-wise. In terms of how engaging it is, the parts of the course preceding contour integration are fairly stock-standard and, in my opinion, not too interesting as a whole. This is in large part because integration is vital to the derivations of many results in complex analysis, so you really have to know some theory of it before being able to fully appreciate them - without that, you\u0092re just left hanging at times. With that in mind, it\u0092s a bit of a shame then that with how fundamental integration is, it comes into the picture quite late in week 7. I definitely think time spent covering more integration at the expense of some topics in the first bit of the course (looking at you, fractional linear transformations) would be a worthwhile trade, since time during trimesters is quite precious. So much additional content that the course used to cover in semesters is now forgotten, which is a real shame - this has probably been the most affected by trimesters in that respect out of all of the courses I\u0092ve done so far.",
        "rating": 4.0,
        "grade": "91 HD",
        "termTaken": "20T3"
      },
      {
        "authorName": "kierisuizahn",
        "description": "Overall a pretty interesting course, but a lot of theorems to remember with very specific conditions. This course mostly involved conceptual questions, but not too much difficult proof writing. Remembering the specifics in complex analysis was the most difficult part of this course, and they tested that you knew them well. Both lecturers explained things well, but I found Prof. Cowling more engaging in some respects. The course was a lot more theory-focused, so I wouldn't recommend taking this course unless you enjoy going through and understanding why theorems work and how they can be used to simplify problems. Some of the integration techniques taught are really cool, but difficult to see without being prompted, and require a lot of working to show (one specific question in the final on a single integral took up a couple of pages, though it was broken into parts). A lot of the stuff taught in the course can be linked to the several variable calculus taught in MATH2111 , which made understanding the content a lot easier.",
        "rating": 3.5,
        "grade": "91 HD",
        "termTaken": "2018 S2"
      },
      {
        "authorName": "RuiAce",
        "description": "This course serves as compulsory for two of the primary mathematics majors, and one viable choice out of two for the statistics major (the other being MATH2221). For the most part it was brilliant; everything about the maths in this course was fun. (This is also what draws students majoring in statistics to this course over MATH2221.) It is the higher counterpart of MATH2521. This course, much like the first semester courses, is a continuation of what's been taught in MATH1231/41/51. Simply put, the first year math courses teach the algebra of complex numbers, whereas this course teaches the calculus of complex numbers. Many proofs in this course are examinable, but have the luxury in that you can figure them out on the spot, so long as you know all the basic ingredients. The lecturers are very funny and keep you engaged decently well. In particular, Dr Michael Cowling drops hints on what might be in the exam, based off previous years. It still ended up being a bit of a bomb though with more twisted questions this year, but for the most part it is fairly relaxed. (In fact, if the final exam didn't drop the bombs, the difficulty would've only been 1.5/5) The course really depicts how different and surprisingly beautiful the adapting of calculus to complex numbers can be. Many things that hold for real analysis are broken when taken to complex numbers, but more powerful results are derived. Note that this course is the expansion of the former course MATH2620 (3 UoC), and was first taught in 2014.",
        "rating": 4.0,
        "grade": "90 HD",
        "termTaken": "2017/2"
      }
    ]
  },
  {
    "course": "MATH2701",
    "reviews": [
      {
        "authorName": "Opengangs",
        "description": "The course lived up to its difficulty and it makes sense considering this is the taster for everything that you do in pure maths. It's split into two halves: the first half being analysis (taught by Lee Zhao) in the first five weeks and the second half being algebra (taught by Catherine Greenhill) in the last five weeks, so considerable effort needs to be shared among both parts. The content was really interesting and it definitely serves as a great bridging course between first year courses and third year pure math courses. In algebra, you are introduced to group theory, transformations (reflections, rotations, translations, etc), and end with projective geometry (which treats lines and points as the same element). On the other hand, in analysis, you learn the underlying concepts of limits and sequences (Cauchy sequences), construction of the reals (Dedekind cuts, Stevin's construction), which leads nicely into p-adic valuation (and subsequently p-adic numbers), as well as inequalities (Holder's inequality and Jensen's inequality) and norms/convex bodies. The assignments were quite fun and interesting, the analysis assignments ended up being a grind while the algebra assignments were fairly breezy. I enjoyed thinking about the assignments and they definitely helped with preparation for the finals. Overall, there really isn't anything I can fault about the course. As difficult as the course was, it was the most enjoyable I have had in a math course thus far. Definitely recommend doing the course if you're willing to put in the work for it.",
        "rating": 5.0,
        "grade": "79",
        "termTaken": "20T3."
      },
      {
        "authorName": "kierisuizahn",
        "description": "A very very fun and very difficult course. The proofs in this course range a lot, but many of those covered in lectures are very difficult to reproduce. The course really helps you think abstractly, but a lot of people found it brutal, and went poorly. The assignments require a lot of thinking, so should not be left until the last minute. Dr. Zhao was a really good lecturer, and really helped develop my abstract thinking with how he explained the process of thought in developing the solutions to questions. Unfortunately, I feel as though Dr. Du was tasked with some of the more boring parts of this course, and the notes were difficult to follow at times. I am, however, an analysist before an algebraist, so I feel that might be some of my own bias coming into play. A good geometric intuition will help a lot with the algebra component of the course. I wouldn't recommend this course unless you really liked abstract thinking and a challenge.",
        "rating": 4.5,
        "grade": "89 HD",
        "termTaken": "2018 S2"
      },
      {
        "authorName": "RuiAce",
        "description": "This course is generally regarded as the pure mathematics \"trademark\" course. It is what distinguishes this major for the rest. It forms the bridge between the mostly computational nature of first year courses, and the extent of proof in the later pure courses. As implied multiple times above, it is divided into an analysis half, and an algebra half. Analysis is the formalisation and extension of every idea used in modern calculus, whereas 'algebra' is the exploration of various structures that build and are used in mathematics. They generally involve quite different ways of mathematical thinking, but form the two main blocks (and debatably, pathways ) of a pure mathematician. Analysis is just intense by nature, but was something that I found quite neat and challenging. It is common to just spend hours at a problem and not get anywhere, and at the same time it's always a huge excitement when you figure it out. This half encourages you to draw upon ANYTHING you've been previously exposed to, and produce neat results out of it. Some topics include the big 'O' notation, inequalities and p-adic analysis. The structures of abstract algebra are mostly groups and fields. Group theory is used in this section but to a small extent; the course's name feels like a misnomer as it's mostly focused on geometries (including projective geometry and transformations). Unfortunately, it really didn't work well with me for several months; I only managed to figure everything out at the end after receiving a lot of help. (There may have been other factors influencing this problem.) Given the nature of pure mathematics, a bridge between first and third year is certainly necessary and this course serves that purpose quite well. However, whilst it may be easier than what's to follow, the content you learn can be a huge shock, hence the significantly lower candidature for the course. Most people do well in this course, but it's usually because they're just that capable.",
        "rating": 3.5,
        "grade": "88 HD",
        "termTaken": "2017/2"
      }
    ]
  },
  {
    "course": "MATH2901",
    "reviews": [
      {
        "authorName": "anomalous",
        "description": "Whether you do this course or not, learning some proper statistics beyond what is taught in high school or 1st year maths is always really good knowledge to have. This course is inherently a more applications-focused one, but the first half of this course (probability theory) should appeal to you if you\u0092re more into pure maths as I am. For a variety of reasons, this was the most difficult of the level 2 core maths courses so far for me. (",
        "rating": 0.5,
        "grade": "84 DN",
        "termTaken": "21T2"
      },
      {
        "authorName": "fun_jirachi",
        "description": "Wanted to do this first while I'm still a little bit mad, don't want to waste energy later getting mad again. If a course's saving grace and only salvageable positive is the course content, you're doing something wrong. It's a prized asset that should ideally make courses great. Unfortunately, that was the case for this particular course. I want to stick to slagging off the course but it's really tough to do without putting my toe across the line, so I'm going to stick to two main issues: Problem 1: Assessments A potential final with a portion on Mobius? That angers me and a lot of the students (from the little I have heard). (also the reason why the 2/5 rating remains tentative). This also comes after the uproar surrounding the midterm on Mobius. While some of my problems with the midterm include some self-sabotage marks wise, it's tough to objectively ignore the associated issues with a) demonstration of knowledge and b) results distribution. Problem 1a) Mobius is such a reductive platform that is good only for quizzes that were basically free marks anyway. For actual demonstration of what you've learned, it's genuine garbage. For maths, you need to show thought processes and working out, which was only available on one question in the midterm. Hearing that it will likely compose a part of the final pisses me off a lot. Again, the platform is reductive as hell and marks a huge departure from in person exams. The best way to mimic these and allow to you use the skills taught in each course is to have moodle submissions of pictures of your work (which literally every other course uses; I've done this in every maths course after math1a/1b (admittedly only two) and it is so much better). Problem 1b) This is somehow worse than problem 1a). We were told we weren't allowed to review our midterm because a) questions were going to be reused in later course offerings and b) it wouldn't have helped us learn anyway. If there's anything I've learned in general from school, it's that everyone learns differently. Not even",
        "rating": 0.5,
        "grade": "80 DN",
        "termTaken": "21T2"
      },
      {
        "authorName": "Opengangs",
        "description": "This is one of the core level 2 courses for any student undertaking a maths degree and it introduces students to the theory behind some statistical concepts. The course is split into two components: the first half covers the basics of probability theory, while the second half dives into the heart of statistical analysis. By the end of the course, you'll feel more confident with all things statistics. I actually enjoyed the course for what it is, an introductory statistics course. I found some results really interesting and non-trivial, and it's made me appreciate the stats a lot more than when I began the term. I found the first half of the course a lot more interesting but that's probably because I found the first half more intuitive than the second half. The lecturer is chill af (legit a dude swore on the first day of lectures and the lecturer replied with \"yeah same\" lmao). The assessments weren't too difficult either, it was really just testing to see if you actually paid attention in lectures. So in all, I really enjoyed the course. Would recommend.",
        "rating": 4.0,
        "grade": "80 DN",
        "termTaken": "20T2"
      },
      {
        "authorName": "kierisuizahn",
        "description": "I personally don't like statistics, so I'm quite biased, but the second half of the course (applied statistics) was quite boring and dry. There were some parts that interested me, but they weren't examinable (more exotic forms of convergence), and we didn't go into much detail. Some of the marking schemes used for the final and midterm were sort of unfair, and the marking for the assignments was really harsh to make up for the simple questions asked. I wouldn't recommend the course unless you have a natural interest in statistics, but MATH2901 is certainly more interesting than MATH2801 if you like pure mathematics. The course is pretty integration-heavy for the first half, and a lot of the second half is calculus and computation-heavy. Not a course I'd do a second time personally, but a useful course nonetheless.",
        "rating": 2.5,
        "grade": "92 HD",
        "termTaken": "2018 S1"
      },
      {
        "authorName": "RuiAce",
        "description": "This is one of the three compulsory Level 2 courses to all mathematics disciplines, offered in semester 1. It is the higher counterpart of MATH2501. Students intending to major in mathematics and statistics must take this course or the standard version. This course can (and",
        "rating": 5.0,
        "grade": "95 HD",
        "termTaken": "2017/1"
      }
    ]
  },
  {
    "course": "MATH2931",
    "reviews": [
      {
        "authorName": "Opengangs",
        "description": "I think the structure of this course really says a lot about the course. Even with previous lecturers, the course has not fared well so it says more about the content taught in the course than the lecturer. The course ties statistical modeling with the theory of linear models so a lot of what you need to know (particularly with the higher course) really comes down to coding it up on a language such as MATLAB, Python, and R. I, on the other hand, enjoy the theory so it didn't really sit well with me. The course, as a whole, was unstructured and I didn't feel like I gained too much from doing this course. It was confusing to follow the lecture content because course content was organised by timestamps more than specific topics so it was really in your best interest to continuously keep up with the course itself. Zdravko typesetted his lecture material on Overleaf live so hearing the the keyboard clacks while listening to him speak was a bit distracting at times. One of the biggest downfalls with this course is that Zdravko never really emphasised the coding in the course. It's a core component of the course with one question specifically dedicated to coding in the final exam, so him not really emphasising the coding component in lectures disheartened me from wanting to even attempt the question (thankfully, it's optional). Preparing for the final exam was a bit of a headache, purely because we aren't given too many resources to work off of besides going over the tutorial problems repeatedly. It's not a terrible course but it's not a memorable one either.",
        "rating": 2.5,
        "grade": "72",
        "termTaken": "20T3."
      },
      {
        "authorName": "RuiAce",
        "description": "This course is basically the continuation of MATH2901 and essential to any statistics major student. It takes the concepts of statistical inference introduced in its predecessor and essentially seeks to introduce basic model fitting and analysis. Much of the content in this course revolves around R; you are not required to write R code but you will need to interpret given code in assignments and in the exam. For me, this course felt significantly more dry and bland than its precursor. The first half of the course introduces all the essentials to model fitting and the concepts behind it, but it gradually turns into just grind and rote. It becomes more memorisation in the later half, and whereas the proofs are decent they start becoming very convoluted. It's more or less about how to fit a model that does whatever it does, and just what deductions you can make out of it. You also need to know the uses of various forms of measure (e.g. Mallow's C p and the PRESS statistic for goodness of fit). This course would've been rated a 1/5, but every course is made better by the presence of Libo and that can't be denied. I don't regard this as a difficult mark despite getting a considerably lower mark in it than MATH2901. I just find it a lot less interesting. It should be remarked again that linear algebra (MATH2501 OR MATH2601) is not a prerequisite for this course. Linear algebra is just an aid used for the proofs in this course. Remember that MATH2931 assumes MATH2901, WHICH assumes MATH1231/41/51, so elementary linear algebra concepts should not be foreign. Stuff like spectral decomposition, may, however, be a bit unfamiliar. Note: The lectures for this course are combined with its ordinary counterpart MATH2831. This is due to the cohorts being appreciably smaller than that of MATH2801/MATH2901. MATH2831 students aren't expected to deal with much of the linear algebra components and have a few less things to memorise.",
        "rating": 2.5,
        "grade": "80 DN",
        "termTaken": "2017/2"
      }
    ]
  },
  {
    "course": "MATH3161",
    "reviews": [
      {
        "authorName": "fun_jirachi",
        "description": "Not a hard course but definitely a course where you have to keep yourself motivated because there is a LOT of raw computation to get through. There are certain things that the course assesses that are painful to work through, namely line searches and Hamiltonians, but this view is admittedly subjectiveness because of my comparative unwillingness to do continuously practice the computation required to solve questions of this sort. My only other gripe with the course was the assignment, which seemed unnecessarily verbose and long for what the outcome turned out to be, but even then this clutches at straws. Otherwise, the course was excellent without being brilliant; I got more or less everything I wanted out of the course without it being as impressionable as some of the previous courses. This course has been and remains consistently very good, any maths student that has time to take this course should do at some point.",
        "rating": 4.0,
        "grade": "87 HD",
        "termTaken": "22T1"
      },
      {
        "authorName": "RuiAce",
        "description": "This course is one of several level 3 applied mathematics courses offered. Well known to be one of the",
        "rating": 4.5,
        "grade": "98 HD",
        "termTaken": "21 T1"
      },
      {
        "authorName": "kierisuizahn",
        "description": "Honestly not that bad of a course, but be warned: Jeya marks very harshly. The course content is easy, so you lose marks elsewhere instead. All of the assessments were quite standard, and followed previous year's assessments pretty closely, but the final was made longer because we had more time; I'm convinced of that. A lot of the problems will have long solutions with a lot of writing and calculation, but many of them can be solved using method learnt in the course step by step, and don't require much thought. Content-wise, you learn a lot of results surrounding optimisation (as one might expect), and more specifically a lot of necessary and sufficient conditions for extreme to be local/global maxima/minima of a function, especially in the context of convex functions. You also learn some algorithmic techniques for finding local extrema, as well as their good/bad points and their various properties. I've ended up using some of the techniques I learnt in this course in other extracurriculars, so it's certainly applicable, even if somewhat boring.",
        "rating": 3.5,
        "grade": "SY",
        "termTaken": "Unknown"
      }
    ]
  },
  {
    "course": "MATH3171",
    "reviews": [
      {
        "authorName": "RuiAce",
        "description": "This is one of many Level 3 elective courses under applied mathematics. Note that this year was the first time ever this course was run , i.e. it was a brand new course. When I asked A/Prof Guoyin to compare this course to MATH3161, he felt that the main differences were in that: - The content in this course is mostly quite new. And indeed so; the field of conic programming is something that's only been around for a few decades. - Interestingly, this course does have more of a focus on global extrema, whilst MATH3161 builds on local extrema techniques. The courses are complementary; they have similar focuses but different executions. I would advise any student interested in optimisation to try taking both of them at some point. This course was generally speaking quite relaxing. I found most of the concepts quite straightforward to learn, and although I was quick to forget it all, it also came back quickly whilst studying for an upcoming assessment task. But what I really liked was how so many concepts took me by surprise. They're not things I would've ever thought of in solving any optimisation problem. The course felt really fresh in that regard. Assessment tasks were generally speaking quite straightforward, apart from the first 15% test that I ran out of time in. I don't believe the course was inherently easy , but it definitely was on the more relaxing end of the spectrum.",
        "rating": 4.0,
        "grade": "95 HD",
        "termTaken": "19t3"
      }
    ]
  },
  {
    "course": "MATH3201",
    "reviews": [
      {
        "authorName": "iregretdoingactl",
        "description": "If you are like me - an idiot who knew nothing and chose this course purely because the name sounded hella cool, you're gonna be in for a bad time because you're gonna be choking from the sheer quantities of ODEs being shoved down your throat. Not only that, instead of the horror of having to derive analytical solutions to those dynamical systems like the typical layer of hell, you'll be subjected to the thick, ribbed schlong of having to work out numerical solutions in incredibly painful and excruciating detail. The only chaos in this class will be your hormones and mental state as each question takes you 5 pages of working out only for you to realise that you made a small mistake 3 pages in. In saying that, this is a fantastic course that I would wholeheartedly recommend purely because of the amazing lecturer Adelle Coster, one of the best i've ever had. Having looked at the new course outline, I realise that Christopher Angstmann will be the one lecturing this year, but if you ever have a chance to take a class by Adelle, I promise you won't regret it. Under Adelle, the two class test closely follows the content of the lecture, but due to the verbose nature of the required answers, a relatively strong grasp of content is perhaps necessary to finish within the allocated time. The final exam under our lord and saviour Adelle has always been a chose your own adventure type of thing, where you only have to pick and do 4 out of 6 of the available questions, which is great if your brain don't have enough cells available to understand every topic, or less great if you are big boy Rui Tong. Experiences may vary under the new lecturer.",
        "rating": 5.0,
        "grade": "83",
        "termTaken": "2018 S2"
      }
    ]
  },
  {
    "course": "MATH3361",
    "reviews": [
      {
        "authorName": "Opengangs",
        "description": "This course made me appreciate the things we took for granted in MATH2901. The course begins with some discussions on stochastic analysis (which is probably the most pure component of the course) before the discussion on stochastic differential equations begin. If you're a stats major looking for an elective, this course is definitely something to consider. For the bulk of the course, however, it places a heavy emphasis on the differential equations aspect, as well as some discussions on some numerical approximations using Euler-Maruyama and Milstein.",
        "rating": 4.5,
        "grade": "88",
        "termTaken": "2021 Term 1"
      },
      {
        "authorName": "RuiAce",
        "description": "This course is one of several level 3 applied mathematics courses offered. Stochastic DEs address one key drawback from ordinary DEs, that everything has to be deterministic. Take something simple like modelling stocks, and inevitably there will be what looks like randomness in the stock price. Another could be just basic population growth, which we can't assume in general must be deterministic like exponential growth. Admittedly, this course felt extremely comfortably relaxing prior to the finals. It felt like another where although the lectures were full on, the assessments were much friendlier and not demanding at all to do, provided you carefully studied everything. There's only 2 hours of lecture a week, so there's also less content to be absorbed. Coding is done in MATLAB, and was assessed in the lab test and assignment. Generally speaking, it suffices to carefully study all the labs (but in particular, the numerical methods). MATLAB documentation was allowed for these, from memory. For the most part, Thanh cares about your code doing the right thing. (Missing a minor code optimisation was probably allowed.) It also helped a lot that for minor errors, Thanh would point them out, yet not penalise. Helps understanding, and isn't harsh on the marks either. You should definitely have some minor stats background before coming into this course (MATH2801/2901 is definitely enough). It is stochastic differential equations after all. MATH2121/2221 experience is not required (ordinary differential equations) at all, but if you took it then you might understand the Karhunen-Loeve expansion a little more quickly than others. The difficulty pretty much all came from the final exam. Which had some relaxing questions early on, but gradually stemmed into what felt like a watered down analysis paper. Certainly felt harder this year than in other years to do, and was a little stressful. I later verified that 5361 had a couple extra questions on top of 3361. (Which was unfortunate, because I did struggle more in the 5361 only questions.) Knowing how to use inequalities was helpful for this year's exam in particular. The inequalities were provided for you in the exam (i.e. less memorisation), but it was often hard puzzling where to use it. (Whereas for the past paper, it felt more like an ability to manipulate limits and sums.) These are all pretty common tools for proofs in analysis though. Not sure how many students would've fought through all of it. An observation is that numerical methods seemed to appear more in the coding component, whilst everything else (elementary stochastic analysis, stochastic integrals, stochastic DEs) seemed to appear more in the theory. But still, numerical methods was also in the theory. KL expansions and GFE methods destroyed my head way more than pre-cursor topics, but that was not surprising. It does also mean that you should pay closer attention to those topics, for the finals.",
        "rating": 4.5,
        "grade": "96 HD",
        "termTaken": "21 T1"
      }
    ]
  },
  {
    "course": "MATH3371",
    "reviews": [
      {
        "authorName": "anomalous",
        "description": "This is a brand new course, so no one really knew what to expect, but I decided to take a chance on it since it seemed like an interesting mix of maths and computing. Having done so, I feel this was a decent pick. The next run in 2023 will probably feel a bit better to those taking it, since the course content was still sort of in development during the term, and they\u0092ll have feedback from our cohort to use for further changes. To be objective though, the course was a little bit unpolished this term. The focus of this course is, naturally, numerical linear algebra. Linear algebra is everywhere, and often the method you learn in the theoretical linear algebra courses for doing various things (e.g. finding the eigenvalues of a matrix) is too slow, totally impractical or prone to precision errors in the real world. As well as seeing the derivation/justification for these more practical methods of performing linear algebra, you also analyse how their computational costs scale and, where possible, how different methods compare. While the material in the first half of the course is pretty chill, things start picking up after flex week: the numerical analysis in the accuracy and reliability topic is no joke, and conjugate gradient methods can be a bit tough to get your head around at first. Probably the most confusing part of this course though is the sudden inclusion of a small \u0093machine learning\u0094 topic on SVMs at the end, which felt very out of place due to its notable lack of any actual linear algebra (instead, it was basically all nonlinear optimisation). Given that the course is inherently computational in nature, part of the course work involves programming. The lab tasks and assignment are intended to reinforce this in a hands-on way, while the rest of the course dealt with the theory aspects. The labs weren\u0092t assessed directly, and I didn\u0092t really see the point of them until the final exam, because you were basically required to use numerical computation to answer one question (which made me regret not doing all of the labs; I gave up in probably week 4).",
        "rating": 4.0,
        "grade": "88 HD",
        "termTaken": "22T1"
      }
    ]
  },
  {
    "course": "MATH3411",
    "reviews": [
      {
        "authorName": "HelpICantThinkOfAName",
        "description": "Wow.",
        "rating": 5.0,
        "grade": "79 DN",
        "termTaken": "2020/T3"
      },
      {
        "authorName": "anomalous",
        "description": "I absolutely loved this course. Thomas Britz is easily my favourite lecturer thus far, and I really can\u0092t say enough nice things about him - a fantastic lecturer who makes the course a total blast. For a Level 3 course, it surely must be one of the easiest - though, disclaimer, I haven\u0092t done any of those other courses. It isn\u0092t boring however, far from it - while a lot of the content is inherently computational, it is a very unique application of some of the staple topics in first year mathematics, discrete and linear algebra. Computer science and software engineering students will find this content particularly interesting I think. The online tests are going to be a similar deal to the ones found in the first year maths courses - you have plenty of time to spam practice tests which contain questions exactly the same as what you will see on the day, just with different numbers. The final exams for this course are pretty normal with one or two challenging questions - our final exam this term was probably the easiest ever given compared to the past papers. If you did well in those first year maths courses, I honestly think this course is barely harder than those, so you will likely find it quite reasonable. I 100% recommend this course if you\u0092re looking for something interesting to do in term 3 and aren\u0092t too scared of things like first year modular arithmetic and linear algebra.",
        "rating": 5.0,
        "grade": "98 HD",
        "termTaken": "19T3"
      },
      {
        "authorName": "kierisuizahn",
        "description": "A very interesting course for anyone interested in information theory or computer science. The course was pretty easy, and there weren't many challenging problems, but the challenging problems that were there, were fun to do. Dr. Britz is an absolute gem, and an amazing lecturer. His teaching style is really good, and keeps you engaged to the content, even though the somewhat boring stuff. He's a very supportive lecturer, and made the course as great as it was. Even if information theory isn't your cup of tea, I'd recommend doing the course just for the lecturer.",
        "rating": 4.0,
        "grade": "96 HD",
        "termTaken": "2018 S2"
      },
      {
        "authorName": "RuiAce",
        "description": "This is one of the few third year mathematics elective courses that falls under Pure Mathematics. Of course, you do not need to be taking that major to be eligible to enrol in the course. Essentially this course is an introduction to the theory of encryption. Topics included error correcting codes and compression codes etc., which essentially provide differing perspectives on how information can be transferred from one party to another. Many fundamental techniques are covered such as Huffman coding, however there's also some more advanced applications. Plus a fun chapter on cryptography at the very end. This was the first course ever where I was able to walk into every lecture, and pretty much almost always understand everything. The only times I got lost were when I zoned out myself. All of the non-mathsy stuff made complete intuitive sense to me and the maths was just stuff I had already seen over and over again in the past. I found that this course was basically just the first time I saw some real-world based applications of stuff I already understood conceptually. The learning spike in this course starts in topic 5 where number theory and abstract algebra is introduced. But as opposed to MATH3711 content which I didn't comprehend, this stuff barely scratches the surface of algebra and only teaches the few things you require for BCH coding (which was one of the hardest things in the course). Usually if you can get your head around topic 5, you've gotten your head around the entire thing. Topic 7 (cryptography) should probably be treated as a standalone thing. It was examinable, but the concepts are (slightly) more independent from the rest of the course and should hopefully be more of an enjoyable topic. I mean, all I have for this course is praise. Biggest WAM booster I've had and comparatively speaking one of the easiest courses I had ever touched. Some people do actually take this course in first year sem 2 (they take MATH1081 in sem 1 which is sufficient as a prereq), but even then whilst it'd be harder for them relatively speaking, it's still manageable. Every maths student should consider taking it for either ease or the chance to witness some cool applications of the stuff they learn, but it does also work as a gen ed for anyone who has taken MATH1081 previously.",
        "rating": 4.5,
        "grade": "96 HD",
        "termTaken": "Unknown"
      }
    ]
  },
  {
    "course": "MATH3511",
    "reviews": [
      {
        "authorName": "HelpICantThinkOfAName",
        "description": "This is a fascinating mixture of subjects, which all compliment each other well. The course begins with Triangle and Circle geometry, which introduces mostly new stuff than what was covered during high school, and goes much more in-depth with proofs, although these are (for the most part) not assessed. Menelaus' and Desargues' theorems formed a large component of this early work. The transformations component is why I reccomend taking Linear Algebra and Complex Analysis before this course. Part of this topic revolved around matrix manipulation and understanding how a matrix can be used in a geometrical sense. Another part used linear fractional transformation, a topic covered in Complex Analysis. I found that understanding how compositions of transformations could result in another transformation was the key to success during this topic I was never able to truly grasp the idea of a group in this course. I struggled with the notation, the calculations, and how groups functioned. This certainly dragged down my mark in the final exam and is why I gave it a high difficulty rating at the end of the course. Overall this is still a great subject and was a lot of fun to take.",
        "rating": 5.0,
        "grade": "79 DN",
        "termTaken": "2019/T3"
      }
    ]
  },
  {
    "course": "MATH3611",
    "reviews": [
      {
        "authorName": "Opengangs",
        "description": "Definitely the most challenging course out of the four courses I did this term, and it's not surprising why. This is one of three core courses for anyone planning to go into Pure Mathematics and it serves to be the more \"calculus\" heavy course out of the three. Essentially, this is a rigorous calculus class and you need to have a certain mathematical maturity to do well in the course. The lecturer doesn't cover many proofs but rather develops the intuition for what the proof should look like and it's your job to fill in the details, and it's a pretty nice system to have. The course begins with a conceptual understanding of what it means for you to say \"cardinality\" of sets (in particular, infinite sets), covering topics such as countability and uncountability before diving into the first real topic of analysis -- metric spaces. You'll develop an understanding for abstracting away from the concrete (instead of talking about distance functions, we can talk about metrics of a space). The course ends with a fairly dense topic on compactness of topological spaces, a topological property that generalises the notion of boundedness and closed-ness. In all, I found this to be a really interesting course and the lecturer does an excellent job at explaining these topics in a way that seems fluid and cohesive. If you're interested in pure mathematics and want to dive into some more calculus, then this is definitely a course for you.",
        "rating": 4.0,
        "grade": "78 DN",
        "termTaken": "2021, Term 2"
      },
      {
        "authorName": "kierisuizahn",
        "description": "My favourite maths course so far. I really love analysis, so that's sort of to be expected, but the proof were really fun, and the content was right up my alley. Dr. Grossman was a great lecturer, although we went an a few long tangents which dropped us a little bit behind schedule (they were interesting tangents though, to be fair). I would highly recommend this course to anyone interested in pure mathematics. Our class collectively wrote up some solutions to a few of the problem sets, though as the term progressed that kind of died; definitely helped when studying for the final though. A lot of the interesting exercises are in the lecture notes, rather than the problem sets. Not really much to say, just a good course all-round.",
        "rating": 5.0,
        "grade": "97 HD",
        "termTaken": "Unknown"
      },
      {
        "authorName": "RuiAce",
        "description": "This course is one of the core courses for a major in Pure Mathematics. Analysis generalises the concepts of limits, continuity and all of the basic stuff taken for granted in calculus. It goes into the theory of all such concepts, and expands their applications into not just involving what you see IRL, such as numbers and vectors. Analytic tools can appear less rigid; the whole notion of limits is not something that's really observed and requires us to believe in some kind of 'extension' on what we can actually see. Personally, I find it works better with my brain. Especially after losing it with algebra, I needed some kind of pure maths left in my soul. I found that I was alright with constructing counter-examples a lot and didn't have too much figuring out the proof, but probably lacked the ability to write it out properly at times. More or less accepting this grade whilst biting my teeth because hey, an HD is an HD, but I would've much preferred a 90+. Some analysis proofs are pretty long, whereas others are no-brainers. A part of the skill in this course is spot what you can do easily and then come back to the hard stuff later. Finding examples and counterexamples is pretty common stuff. Perhaps the other thing I'd say is that you really want to know all of your definitions and theorems. Because I've found that with analysis proofs, bashing definitions and theorems is quite a fair bit of what you do. There's a mix of hard and soft analysis in this course, but I think there's slightly more soft analysis; epsilons were everywhere but still a fair bit of the course involved topological spaces and compactness. (The course outline isn't really accurate in my year; the course content was somewhat cut down. Quite grateful to Pinhas for it; I had a better understanding of what was examinable as a result of it.)",
        "rating": 4.0,
        "grade": "85 HD",
        "termTaken": "Unknown"
      }
    ]
  },
  {
    "course": "MATH3701",
    "reviews": [
      {
        "authorName": "kierisuizahn",
        "description": "I ended up adoring this course afterwards. The start of the course is somewhat slow, but by the end you're doing some really cool things linking geometry and topology together, and I found it really interesting. This course is considered the hardest of the three main pure maths courses, and it certainly lives up to that (Dr. Chan ended up cutting some content and dumbing bits of the course down for us). Some parts of the course, before hitting manifolds, are quite computational, and the cross product makes its ugly return, but after introducing manifolds most of that disappears. The content relies heavily on your geometric intuitions, and I felt that a fair bit of the first third of the course was trying to build up our intuition before we hit the nitty gritty. Although the course name is \"topology and differential geometry\", Dr. Chan has taken the course and focused on the differential geometry aspect, with the topology more as a means to achieve things. Towards the end of the course, topology starts to become more important, but is still heavily related to the differential geometry aspect of the course, which I personally preferred. Neither MATH3611 nor MATH3711 are prerequisites, but the topology knowledge from MATH3611, and the properties of quotient groups from MATH3711 are very useful. I would highly recommend this course to anyone with a pure maths bent (not that you have a choice, it's mandatory). Dr. Chan is a great and engaging lecturer, and motivates all of his examples well. If it weren't for the computational aspect of some of the course, it's be an easy 5/5 rating.",
        "rating": 4.5,
        "grade": "99 HD",
        "termTaken": "Unknown"
      },
      {
        "authorName": "RuiAce",
        "description": "Please be advised that this review is subject to becoming outdated immediately. The course structure in 19 t3 is expected to be different under the new lecturer. This course is one of the core courses for a major in Pure Mathematics. Topology is sort of a bridge between analysis and algebra - it uses concepts in both. Whilst its roots seem to stem from elementary set theory, it adds in various algebraic and analytic structures. It is of course, the field of maths that talks about the coffee cup and the donut. Whereas differential geometry is, as I like to summarise it simply, putting some kind of calculus (differential structure) on curves and surfaces that we already know of. (Although it does touch on manifolds, which generalises upon surfaces.) I had a lot of trouble with this course throughout the semester. I found it difficult dealing with the fact that I had to forfeit any sense of mathematical rigour to understand the concepts, because many rigourously defined things were just too bizarre (although fortunately not examinable either). Eventually I relied heavily on two things - intuition and rote learning. Intuition can be helpful especially when dealing with topology because trying to formalise something built on algebraic topology can be hard, but being able to picture a loop or some shit in your head turns out to be sufficient most of the time. Same goes for certain aspects of differential geometry, most notably the basic definitions. On the other hand the rote learning was disappointing - I still don't fully understand Van Kampen's theorem or geodesics (or other unlisted stuff) yet. I've mostly been taking for granted how to use it. I definitely do advise \"intuition\" as something to develop and utilise in this course. It pushed me through a fair lot of the course despite constantly being in agony over it. What was certainly a bit of a shock was that this course had some very nasty computations. I wasn't expecting that for a level 3 pure mathematics course and it can get quite annoying, so that's something to keep in mind about. But other than that, the proofs in this course didn't require full detail (or so I felt). So long as you displayed some understanding of the concepts, something wishy-washy wasn't necessarily so bad it seems. The teaching quality was something I was really uncomfortable about with this course. Occasionally concepts made sense, but at other times they were just skimmed with insufficient intuition. On the other hand things I found the consultations were a lot more life-saving (the 1-on-1 help helps a lot) and I am very thankful for both the 40% assignment and the generous marking across all tasks. I believe that the lecturer's personality should be praised.",
        "rating": 2.5,
        "grade": "89 HD",
        "termTaken": "Unknown"
      }
    ]
  },
  {
    "course": "MATH3711",
    "reviews": [
      {
        "authorName": "Opengangs",
        "description": "This is your standard abstract algebra course. The course is split primarily into three parts: group theory, ring theory, and field theory. The latter two are combined as one since they play very similar roles. For the bulk of the course, you will be discussing group theory, properties of groups, and important theorems that surround them. You will have had brief stints with groups in MATH2601 and MATH2701, so the properties of groups should be no surprise to you. The difficulty of the course begins to ramp up as you dive deeper into these theorems. The second half of the course talks about ring and field theory, two more important algebraic structures that are built from the study of groups. I went into the course thinking this would be quite dry but actually really ended up enjoying it. The course content was interesting enough to keep me from falling asleep at 9am lectures. The pacing of the course is quite fast so it's in your best interest to keep up to date to prevent last minute cramming. But it's a course worth doing if you enjoyed the group theory component in MATH2601 (not like you have a choice if you choose to major in pure anyways).",
        "rating": 4.0,
        "grade": "89",
        "termTaken": "2021 Term 1"
      },
      {
        "authorName": "kierisuizahn",
        "description": "I generally prefer analysis over algebra, but this course was actually really interesting. I probably would have enjoyed it more if it weren't examinable, as the timed assessments kind of sapped the joy out of doing the harder questions, but the course content itself was fun. It's easy to fall behind, since the pace of the course is quite fast, so I'd recommend keeping on top of things if you don't want to be cramming before the exam, and a few of the concepts are conceptually challenging, so having the lecturer explain them helped solidify my understanding. The lecture notes are mostly sufficient, but going to the lectures is recommended regardless.",
        "rating": 4.0,
        "grade": "95 HD",
        "termTaken": "Unknown"
      }
    ]
  },
  {
    "course": "MATH3821",
    "reviews": [
      {
        "authorName": "RuiAce",
        "description": "This course is compulsory for all students pursuing a statistics major. (There is no higher counterpart.) It's essentially the course aimed at developing and training real-world application of statistics. The R software is used. I think everyone felt this way. The lectures were far too packed. A bit too much content was present in this course and getting lost following the lecture was an unusually more common thing here. This change was implemented last year, but apparently there was more advice on how to deal with it. It's a huge trek trying to study for it otherwise. Perhaps, a bit too much breadth given the time? I think he did try to put depth in, but it was a bit foreshadowed. Regardless, I wouldn't imagine a thing called keeping up with this course is possible unless somehow you've seen it all before. Biggest drain was in the second assignment honestly. I appreciated the lecturer's genuine marking a lot, but mixing in both a report and the presentation was a bit torturous. Still though, there definitely were improvements - I was very thankful to find that Q&A panel and peer review was taken out. (I really shouldn't say this as a statistics student, but I wasn't interested in hearing about various investigations - I just wanted to do the task!) Also unlike the first assignment, groups are randomly selected by the lecturer for the second. Some of my mates got put with bad teammates, which made things hard. I got lucky here. Strong emphasis as in a prior review though - this course is NOT 100% computing. Although both assignments and the midterm revolved heavily around computing, the finals is still a 60% weighted exam, of which only roughly 10% was computing based. It's a math course, so expect some level of theory involved. Computing is just a means to an end when it comes to modelling. Final exam questions are niche. Doing the tutorials helps a lot, because about half of our questions were based around them. But also you need to understand the content physically to be able to do a large portion of the rest of the exam. It's just that proofs weren't really assessed much until the finals. The only proof question in assignment 1 was straightforward. Also: Although MATH3871 is definitely not assumed knowledge, I found that doing it beforehand made the Bayesian half of this course FAR more dealable. Whilst some of my peers were forced to learn Bayesian altogether, I was like \"oh yeah this is just 3871 gone nuts\". Could be advice for you? Keep in mind though Bayesian is now offered in T3, whilst this is a T2 course.",
        "rating": 3.0,
        "grade": "94",
        "termTaken": "19t2"
      },
      {
        "authorName": "MLov",
        "description": "If you think this is an easy computing course, then you've walked yourself to the wrong door. MATH3821 is a *",
        "rating": 4.0,
        "grade": "HD",
        "termTaken": "Unknown"
      }
    ]
  },
  {
    "course": "MATH3871",
    "reviews": [
      {
        "authorName": "Opengangs",
        "description": "A fantastic and highly practical course that shies away from classical statistics. The course is split into two major themes: the theory of Bayesian inference, and the practicality of implementing Monte Carlo methods which is arguably the most important aspect of the course. There is equal weighting between the theory and the practical component so you should familiarise yourself with both aspects of the course. And in fact, the way to understand the theory is to understand what you're implementing when you're in the labs. This was how I understood the Monte Carlo methods. The assessments were relevant to the lecture content and the lecture slides were more than sufficient to do well in the course. However, because the tutorial and the lecture slots were so packed together (lecture was 7-9PM on a Tuesday evening and the tutorial was 9AM on a Wednesday morning), I often found myself not having any time to complete the tutorial problems until the first week of stuvac. In short, I basically learned how to do each of the problems without attempting it first during the tutorial. In saying that, if you need an elective and don't mind the challenge to learn something interesting, I would recommend this course. Just don't neglect either the coding or the theory, and you'll be fine.",
        "rating": 4.0,
        "grade": "92 HD",
        "termTaken": "2021 Term 3"
      },
      {
        "authorName": "RuiAce",
        "description": "This is one of the third year electives for a Statistics major. Completion of this course along with the three core gets accreditation with the Statistics Society of Australia. Bayesian inference stems from a probabilistic approach of inference - it literally falls out of Bayes rule. In the classical frequentist approach, parameters to be estimated were fixed, but Bayesian approaches treat the parameter itself as a random variable, consequently invoking lots more probabilistic techniques (credible intervals, hypothesis tests, expectation of the parameter, predictive distribution etc.) This course also introduced simulation techniques. Basic methods (inverse transform, accept/reject method) were covered but there was a lot of depth put into Markov-chain Monte Carlo. The computations in this course are quite interesting. On one hand, some of them are fairly straightforward thanks to the shortcuts you're introduced in weeks 1 and 2. But then at other times they get completely chaotic and it feels a bit like a war trying to fight through all of it (cough Bayes factors). A part of the course was recognising distributions, because that helped you simplify down nasty integrals (including multivariate integrals). Those tricks were so convenient though. Trivialised pretty much half of the computations you saw in this course. The simulations were examined through making you do a few computations in advance and also writing pseudocode. For example, with the usual rejection sampling you had to understand high school optimisation to find the optimal enveloping constant. But you pretty much just had to adapt your distributions/values/etc. to the algorithm itself to write out the pseudocode, and there was no strict style guide for it either. Much like with combinatorics last sem, I found I actually liked this course despite having various difficult concepts. It helped that the tutorials/assignments/exam were all made fairer by the new lecturer (this course used to be a 5/5 difficulty course). But it was still pretty easy to get lost in the lectures because the lecture examples were much harder to grasp (a lot of multivariate computations). You did need to know all the definitions, techniques and tricks the course teaches you to do well in the exam. A bit of all of that was asked.",
        "rating": 4.5,
        "grade": "92 HD",
        "termTaken": "Unknown"
      }
    ]
  },
  {
    "course": "MATH3901",
    "reviews": [
      {
        "authorName": "RuiAce",
        "description": "This is one of the Level 3 core courses to students pursuing a statistics major. Among the three cores, I personally believe this is the hardest of the lot. MATH3821 gets its difficulty from having too much content. This course is about probability theory, and that's not something you can simply overcome with memorisation. This course is pretty popular among mathematics students as a whole due to the fact that MATH2931 is not a prerequisite and that it's really just a probability course, not statistics. Part of this is influenced by the fact that many people genuinely enjoy the first half of MATH2901, and drop off in the second. Mastery of this course can be extremely useful in the short term, because the strengthened intuition in probability can help useful in trading interviews, where probability based questions resurface more than you might expect. Stochastic processes are just useful in general for people who want to work with the market. A simple summary: a stochastic process is just a sequence of random variables measured over time (can be both discrete time and continuous time). Assessment tasks are definitely more challenging in this course, compared to its sister course MATH3911. Although most questions are doable, every past paper I've seen seems to introduce a completely unrelated question to that of the previous paper. They all use the same techniques, but the question style appears foreign. For the class tests, the questions are the same. The difference is that he changes the letters in the actual test. (Or for MATH3801, he might change a number instead.) Figure out a way to write it as quickly as you can, but not too quickly that you'd struggle with different letters/numbers. Some explanation skipping is okay, just not too much. Also, after studying for the finals, I would advise being careful with Brownian motion. It's also a really interesting concept to learn about, but it can take a while to understand because it's so far to the end and is fairly different to the stochastic processes you see before it. (The difficulty would've been 4/5, but it jumped to 4.5/5 after I saw the challenge of this year's midsession. It was a pretty spiked paper to offset that we had all the lecture notes available, and not just the cheat sheet.) Edit: I'm convinced 4.5/5 was the right choice now after studying for finals.",
        "rating": 4.5,
        "grade": "SY",
        "termTaken": "20T1"
      },
      {
        "authorName": "MLov",
        "description": "Level 3 statistic courses usually have a lot of contents (700+ slides iirc), you will learn a lot of interesting stuff like Markov chains, Queueing theory, Branching process etc. It is fun and challenging, you would learn a lot of new ways to solve probability related questions. If you are doing ACTL/Adv Sci (Math), it is pretty much a revision of ACTL2102 without time series. But be sure to be familiar with brownian motions, stochastic differential equations (SDEs) and martingales, coz ACTL3182 pretty much assumes them and straight away jump into the derivation of Black Scholes models and other stochastic models.",
        "rating": 5.0,
        "grade": "HD",
        "termTaken": "Unknown"
      }
    ]
  },
  {
    "course": "MATH3911",
    "reviews": [
      {
        "authorName": "RuiAce",
        "description": "This course is (the higher counterpart of) one of the core courses for a major in statistics. Inference is essentially concerned with the decision making in statistics. The aim is to be able to construct and then use the most optimal tests for a much greater variety of scenarios, as opposed to the one or two special cases covered in MATH2901. This course completely surpassed my expectations. I went in not expecting much but despite the lack of past papers, Spiro clearly knows how to manage/teach a course. Assessments were definitely doable and I doubt I can achieve such a result again. I had an interesting experience with this course. Assignment 1 was released, I'd learn up to everything needed for it, and then be too tired to continue. Midterm starts looming, I learn everything up to that point, and then be too tired to do more. Assignment 2 released, same thing happens. (And then of course finals come and I need to know the entire syllabus.) Moral of this story though is that it's perfectly possible to do well in this course provided you stay on track when you need to. There's quite a fair bit that gets asked and at times I got confused easily (much like in MATH3871), but so long as you know what you need when you actually need it, it's mostly fine. Some remarks: I think bootstrapping/jacknifing/robustness doesn't really pop up in exams - only assignments. (Doesn't mean you should purposely ignore them obviously, but if you're running short on time, well you know what to prioritise.) The Bayesian inference part only goes for one week and definitely not anywhere in depth as with MATH3871 - having done that course first made that week easy for me. Also I think actuarial students do have an edge, having seen a lot of the tests already (Wilcoxon, Kolomogorov-Smirnov, chi-squared GoF etc.) Also, definitely try to keep on track with the lectures",
        "rating": 4.5,
        "grade": "99 HD",
        "termTaken": "19 T1"
      }
    ]
  },
  {
    "course": "MATH6781",
    "reviews": [
      {
        "authorName": "iregretdoingactl",
        "description": "Essentially, what this course aims to provide an introduction to mathematical modelling and data analysis for biological and biomedical systems, with heavy focus on the spread of diseases and its iteration with the human body amongst other things. This course is quite a refreshing and enjoyable one, perhaps due to the fact that the mathematics that is being taught builds upon and models real world phenomenon unlike what those nerds do in pure maths/statistics. However, as with all applied mathematics, the bulk of this course is, you guessed it: ODEs, so a rigorous foundation is preferable. 2018 was John Murray's first year teaching the course, so whilst incredibly experienced in the field of biomathematics, he was understandably not the most solid or well prepared lecturer, having to pause for lengthy periods of time during his explanations almost every lesson. Furthermore, I personally found his teaching a bit handwavy, as in not enough focus were put into the important parts of the content and many parts were a bit rushed/unclear. However, professor Murray is a very caring lecturer, and would not hesitate to explain/revisit any problem that was raised in detail during/after each lecture. He would also provide a lot of support before each class assessment/final and would often check that we were following along during class. Lastly, and perhaps his greatest strength, is that he has an incredibly sublime and manly voice, something that I could listen to forever. In terms of marks, the class tests and final were all closely based on ALL content in the lecture slides. This proved a little difficult personally as I was negligent in mastering the course content during the semester. The assessment is also based on questions in the lecture slides, where we had to derive the answers ourselves instead, and were completely doable if enough time was spent on it (a bit of matlab was required to simulate the models, but sample code was given during a previous tutorial). Overall I would say that the course is an \"easy\" one. It starts off very simply as a revision of ODEs and slowly builds in complexity and challenge. Now whilst some of the later content is a bit of a brain teaser to figure out, especially with how unrigorously it was taught, there is very little surprises within it, especially compared to the cancer that is ACTL3141 and ACTL3151, so if you hit your head against the textbook enough times, enough will leak in to your brain and you will surely do well.",
        "rating": 4.0,
        "grade": "86",
        "termTaken": "2018 S2"
      }
    ]
  },
  {
    "course": "MUSC1101",
    "reviews": [
      {
        "authorName": "katie,rinos",
        "description": "I really enjoyed this course and most of the content in the lectures. The first half of this course focuses on the musicology of the early 20th century and is a mix of both historical background and different pieces/composers. The 2nd half of the course focuses on ethnomusicology and the music of different cultures. With the writing assessments, there were three different topics that you could choose from (Modernism, Impressionism, and Nationalism). The definition, biography and essay built on your knowledge of the topic and you were able to use information from your bio and definition in your essay. There is a listening list of pieces that you need to know for the listening test, which is worth 20%. Napier could play any section of the pieces and you need to be able to recognise the piece and write down the title, composer, genre, section/mvt and 25-50 words of historical significance/techniques. This is something that definitely can\u0092t be studied overnight and needs a lot of work.",
        "rating": 4.0,
        "grade": "70 CR",
        "termTaken": "2018,1"
      }
    ]
  },
  {
    "course": "PHYS1131",
    "reviews": [
      {
        "authorName": "kierisuizahn",
        "description": "The \"Other\" part of the course was a problem solving workshop that ran 3 times throughout the semester. You were given an exam (basically), and about 30min to complete it before the supervisors went through the solutions. Attendance to these recommended. Difficult to cram for this course, so it is best to remain up to date, especially with the mechanics topic (towards the end). Joe Wolfe was very enthusiastic, and explained concepts well, as did (to a lesser extent) the other lecturers. The content is skewed towards his topic (mechanics), and most of the difficulty lied in understanding mechanics. The other two topics (especially thermal physics) are generally easier to understand and apply. An enjoyable course for those who enjoyed HSC physics, but since it was only a filler course (since MATH1081 was full for semester one), I did not enjoy it nearly as much as I'd hoped, mainly due to my very useful habit of cramming everything at the end.[/list]",
        "rating": 2.0,
        "grade": "90 HD",
        "termTaken": "2017 S1"
      }
    ]
  },
  {
    "course": "PHYS1241",
    "reviews": [
      {
        "authorName": "blasonduo",
        "description": "Compared to 1121/1131, the laboratories in 1241 are way more fun. They don't get assessed, and you get to do legit what you want to do at the end. Basically, for the first hour, you attempt an investigation related to the lectures. The next hour, you have to do extension investigations, investigating something similar. This allows for some really cool and imaginative investigations, also making labs a lot less stressful. However, Lab reports are required to be written up every 3 weeks, and to get perfect marks, a lot of effort is needed to be put into them (by the end of the semester, I had written 125 pages in my lab book, but the average was around 85). This spent me hours to do, as it required uncertainty graphs and long discussions and neat tables, probably spent the most time doing these at home, then anything else in semester 2. The assignments were normally 6 questions ranging from pretty okay, to \"wtf is this, how is this possible to solve\". Luckily, about half of the questions could be googled, which allowed a sense of security. The others required you to discuss with other members of the course, and you need to do this to get good marks (unless you are very, very smart (like Rui)). I suggest making/joining a group chat for the course. The final exam questions, for the most part, is extremely difficult (about half) and requires quite a lot from you for a 2-hour exam, making it quite difficult to do well. Also, the past exams only have the first part of the exam with answers, as Gal thinks it's silly to have answers. So it can be difficult to study the 2nd half of the course. Otherwise, as long as you attempt past papers, the final exam won't be too awful. As for the lectures, Liz is fantastic at the actual content, with an explanation of the content, with an experiment, followed by solving questions. This way of lecturing was fantastic for reviewing and knowing if you really understand what was taught, and has a bit of fun with experiments. Also has extra ones on the internet to follow along with. An overall fantastic lecturer. Gal is fantastic at being so engaging and making physics so fascinating. He would show physical applications and you'd sit there, like a child with a bedtime story, it was great. However, the relevance to the course was very minimal, and so the questions that were asked in practice exams or tutorials felt foreign, and thus meant that self-teaching was occasionally needed. The tutorials require you to explain a question by writing and speaking, it does help with confidence and with future tasks that require public speaking and problem solving (like TA!) Overall, this course is very fun but very, very time-consuming. (probably spent 45% of my study/homework time on this course) Even if you think you aren't the smartest (like myself) and are majoring in physics, I highly recommend doing this course, it allows you to meet other physics majors and you get a feel for 2nd-year courses (lab reports and LaTeX writing).",
        "rating": 4.3,
        "grade": "78 DN",
        "termTaken": "2018 Semester 2"
      }
    ]
  },
  {
    "course": "PHYS3116",
    "reviews": [
      {
        "authorName": "blasonduo",
        "description": "As a physics elective, if you want a really easy, but interesting course, this is the course for you. This is by far the easiest elective out there. That being said, the whole course is really underwhelming. The lectures themselves were alright (albeit the bland nature of the lecturers), but the slides made it almost impossible to study on for exams, and with no supporting material, it made the whole studying really difficult. This is really a textbook focused course. The whole of the first assignment was just questions picked out of the textbook. This course could be way harder, with integrals, however (luckily for us) the majority of the questions are simply 'plug and chug', a real positive. There really isn't much more to say apart from don't expect much effort from the course coordinators, just stick to the textbook and it'll be pretty easy",
        "rating": 2.3,
        "grade": "76 DN",
        "termTaken": "2020 T3"
      }
    ]
  }
]