openapi: 3.0.0
info:
  description: Backend routes for CSElectives 2.0
  version: 1.2.0
  title: CSElectives API Routes
  contact:
    email: projects.cselectives@csesoc.org.au
  license:
    name: CSElectives 2.0
    url: https://github.com/csesoc/cselectives-v2/blob/develop/LICENSE

paths:
  /user/register:
    post:
      tags:
        - "User"
      summary: Registers a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                zid:
                  $ref: '#/components/schemas/User/properties/zid'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    $ref: '#/components/schemas/TokenData'
        '400':
          description: Bad request
  /user/login:
    post:
      tags:
        - "User"
      summary: Logins a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                zid:
                  $ref: '#/components/schemas/User/properties/zid'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    $ref: '#/components/schemas/TokenData'
        '400':
          description: Bad request
  /user/${zid}:
    get:
      tags:
        - "User"
      summary: Retrieves user profile with zid
      parameters:
        - in: path
          name: zid   # Note the name is the same as in the path
          required: true
          schema:
            type: string
            minimum: 1
          description: The user ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/User'
        '400':
          description: Bad request
  /courses:
    get:
      tags:
        - "Courses"
      summary: Gets a list of all course objects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        '500':
          description: An internal server error occurred
  /courses/${courseCode}:
    put:
      tags:
        - "Courses"
      summary: Puts a course with new courseCode into database
      parameters:
        - in: path
          name: courseCode
          required: true
          schema:
            type: string
            minimum: 1
          description: The course code
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          description: Bad request
  /courses/bookmark:
    post:
      tags:
        - "Courses"
      summary: Bookmarks a specific course for a specific user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                courseCode:
                  $ref: '#/components/schemas/Course/properties/courseCode'
                zid:
                  $ref: '#/components/schemas/User/properties/zid'
                bookmark:
                  type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          description: Bad request
  /reviews:
    get:
      tags:
        - "Reviews"
      summary: Gets a list of reviews
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '500':
          description: An internal server error occurred
    post:
      tags:
        - "Reviews"
      summary: Creates a review
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostReviewRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Bad request
  /reviews/${courseCode}:
    get:
      tags:
        - "Reviews"
      summary: Gets reviews for a specific course with courseCode
      parameters:
        - in: path
          name: courseCode   # Note the name is the same as in the path
          required: true
          schema:
            type: string
            minimum: 1
          description: The course code
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '500':
          description: An internal server error occurred
  /reviews/${reviewId}:
    put:
      tags:
        - "Reviews"
      summary: Edits a specific review with reviewId
      parameters:
        - in: path
          name: reviewId   # Note the name is the same as in the path
          required: true
          schema:
            type: string
            minimum: 1
          description: The review ID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                authorName:
                  $ref: '#/components/schemas/Review/properties/authorName'
                grade:
                  $ref: '#/components/schemas/Review/properties/grade'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Bad request
    delete:
      tags:
        - "Reviews"
      summary: Deletes a review with reviewId
      parameters:
        - in: path
          name: reviewId   # Note the name is the same as in the path
          required: true
          schema:
            type: string
            minimum: 1
          description: The review ID
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
  /reviews/bookmark:
    post:
      tags:
        - "Reviews"
      summary: Bookmarks a specific review for a specific user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reviewId:
                  $ref: '#/components/schemas/Review/properties/reviewId'
                zid:
                  $ref: '#/components/schemas/User/properties/zid'
                bookmark:
                  type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Bad request
  /reviews/upvote:
    post:
      tags:
        - "Reviews"
      summary: Lets a user upvote a review with reviewId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reviewId:
                  $ref: '#/components/schemas/Review/properties/reviewId'
                zid:
                  $ref: '#/components/schemas/User/properties/zid'
                upvote:
                  type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Bad request
  /reports:
    get:
      tags:
        - "Reports"
      summary: Get all reports
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
    post:
      tags:
        - "Reports"
      summary: Lets a user report a specific review
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reviewId:
                  $ref: '#/components/schemas/Review/properties/reviewId'
                zid:
                  $ref: '#/components/schemas/User/properties/zid'
                reason:
                  $ref: '#/components/schemas/Report/properties/reason'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '400':
          description: Bad request
    put:
      tags:
        - "Reports"
      summary: Changes the status of a specific report
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reportId:
                  $ref: '#/components/schemas/Report/properties/reportId'
                zid:
                  $ref: '#/components/schemas/User/properties/zid'
                status:
                  $ref: '#/components/schemas/Report/properties/status'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '400':
          description: Bad request

components:
  schemas:
    User:
      type: object
      properties:
        zid:
          type: string
        reports:
          type: array
          items:
            $ref: "#/components/schemas/Report"
        reviews:
          type: array
          items:
            $ref: "#/components/schemas/Review"
        bookmarkedReviews:
          type: array
          items:
            $ref: "#/components/schemas/Review"
        bookmarkedCourses:
          type: array
          items:
            $ref: "#/components/schemas/Course"
        isAdmin:
          type: boolean
    TokenData:
      type: object
      properties:
        expiresIn:
          type: string
        token:
          type: string
    Review:
      type: object
      properties:
        reviewId:
          type: string
          format: uuid
        zid:
          $ref: "#/components/schemas/User/properties/zid"
        courseCode:
          $ref: "#/components/schemas/Course/properties/courseCode"
        authorName:
          type: string
        title:
          type: string
        description:
          type: string
          nullable: true
        grade:
          type: integer
          nullable: true
        termTaken:
          type: string
        createdTimestamp:
          type: string
          format: date-time
        updatedTimestamp:
          type: string
          format: date-time
        upvotes:
          type: array
          items:
            $ref: "#/components/schemas/User/properties/zid"
        manageability:
          type: number
        usefulness:
          type: number
        enjoyability:
          type: number
        overallRating:
          type: number
    PostReviewRequestBody: # Note this has no "reviewId" nor "upvotes" property
      type: object
      properties:
        zid:
          $ref: "#/components/schemas/User/properties/zid"
        courseCode:
          $ref: "#/components/schemas/Course/properties/courseCode"
        authorName:
          $ref: "#/components/schemas/Review/properties/authorName"
        title:
          $ref: "#/components/schemas/Review/properties/title"
        description:
          $ref: "#/components/schemas/Review/properties/description"
        grade:
          $ref: "#/components/schemas/Review/properties/grade"
        termTaken:
          $ref: "#/components/schemas/Review/properties/termTaken"
        manageability:
          $ref: "#/components/schemas/Review/properties/manageability"
        usefulness:
          $ref: "#/components/schemas/Review/properties/usefulness"
        enjoyability:
          $ref: "#/components/schemas/Review/properties/enjoyability"
        overallRating:
          $ref: "#/components/schemas/Review/properties/overallRating"
    Course:
      type: object
      properties:
        courseCode:
          type: string
        archived:
          type: boolean
        attributes:
          type: array
          items:
            type: string
        calendar:
          type: string
        campus:
          type: string
        description:
          type: string
        enrolmentRules:
          type: string
        equivalents:
          type: array
          items:
            $ref: "#/components/schemas/Course/properties/courseCode"
        exclusions:
          type: array
          items:
            $ref: "#/components/schemas/Course/properties/courseCode"
        faculty:
          type: string
        fieldOfEducation:
          type: string
        genEd:
          type: boolean
        level:
          type: integer
        school:
          type: string
        studyLevel:
          type: string
        terms:
          type: array
          items:
            type: integer
        title:
          type: string
        uoc:
          type: integer
        rating:
          type: number
        reviewCount:
          type: integer
        overallRating:
          $ref: "#/components/schemas/Review/properties/overallRating"
        manageability:
          $ref: "#/components/schemas/Review/properties/manageability"
        usefulness:
          $ref: "#/components/schemas/Review/properties/usefulness"
        enjoyability:
          $ref: "#/components/schemas/Review/properties/enjoyability"
    Report:
      type: object
      properties:
        reportId:
          type: string
          format: uuid
        review:
          $ref: "#/components/schemas/Review"
        zid:
          $ref: "#/components/schemas/User/properties/zid"
        status:
          type: string
          enum: [UNSEEN, SEEN, REMOVED, SETTLED]
        reason:
          type: string
        createdTimestamp:
          type: string
          format: date-time
        updatedTimestamp:
          type: string
          format: date-time