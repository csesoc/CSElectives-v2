openapi: 3.0.0
info:
  description: Backend routes for CSElectives2.0
  version: 1.0.0-oas3
  title: CSElectives API Routes
  contact:
    email: joel.huang@csesoc.org.au
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
# tags:
#   - name: admins
#     description: Secured Admin-only calls
#   - name: developers
#     description: Operations available to regular developers

paths:
  /user:
    post:
      summary: Onboards a user
      requestBody:
        required: true
        content:
          application/json:  
            schema:
              type: object
              properties:
                zid:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /user/${zid}:
    get:
      summary: Login for the user
      parameters:
        - in: path
          name: zid   # Note the name is the same as in the path
          required: true
          schema:
            type: string
            minimum: 1
          description: The user ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: No user found
    put:
      summary: Changes users admin privleges
      parameters:
        - in: path
          name: zid   # Note the name is the same as in the path
          required: true
          schema:
            type: string
            minimum: 1
          description: The user ID
      requestBody:
        content: 
          application/json:
            schema:
              type: object
              properties:
                is_admin:
                  type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/User'
  /courses:
    get:
      summary: Gets a list of all course objects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
  /courses/${course_id}:
    put:
      summary: Puts a course with new course_id into database
      parameters:
        - in: path
          name: course_id  
          required: true
          schema:
            type: string
            minimum: 1
          description: The course code
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
  /courses/bookmark:
    post:
      summary: Bookmarks a specific course for a specific user
      requestBody:
        content: 
          application/json:
            schema:
              type: object
              properties:
                course_code:
                  $ref: '#/components/schemas/Course/properties/course_code'
                zid:
                  $ref: '#/components/schemas/User/properties/zid'
                bookmark:
                  type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
  /reviews:
    post:
      summary: Creates a review
      requestBody:
        content: 
          application/json:
            schema:
              type: object
              properties:
                author_id: 
                  $ref: "#/components/schemas/User/properties/zid"
                author_name:
                  type: string
                description:
                  type: string
                course_code:
                  $ref: "#/components/schemas/Course/properties/course_code"
                rating:
                  $ref: "#/components/schemas/Rating/properties/overall"
                termTaken:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
    get:
      summary: Gets a list of reviews
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
  /reviews/${review_id}:
    put:
      summary: Edits a specific review with review_id
      parameters:
        - in: path
          name: review_id   # Note the name is the same as in the path
          required: true
          schema:
            type: string
            minimum: 1
          description: The review ID
      requestBody:
        content: 
          application/json:
            schema:
              type: object
              properties:
                author_id: 
                  $ref: "#/components/schemas/User/properties/zid"
                author_name:
                  type: string
                description:
                  type: string
                course_code:
                  $ref: "#/components/schemas/Course/properties/course_code"
                rating:
                  $ref: "#/components/schemas/Rating/properties/overall"
                termTaken:
                  type: string
      responses:
        '200':
          description: OK
    delete:
      summary: Deletes a review with review_id
      parameters:
        - in: path
          name: review_id   # Note the name is the same as in the path
          required: true
          schema:
            type: string
            minimum: 1
          description: The review ID
      responses:
        '200':
          description: OK
  /upvote/${review_id}:
    post:
      summary: Lets a user upvote a review with review_id
      parameters:
        - in: path
          name: review_id   # Note the name is the same as in the path
          required: true
          schema:
            type: string
            minimum: 1
          description: The review ID
      requestBody:
        content: 
          application/json:
            schema:
              type: object
              properties:  
                upvote:
                  type: boolean
      responses:
        '200':
          description: OK
  /reviews/bookmark:
    post:
      summary: Bookmarks a specific review for a user
      requestBody:
        content: 
          application/json:
            schema:
              type: object
              properties:  
                review_id:
                  $ref: '#/components/schemas/Review/properties/review_id'
                zid:
                  $ref: '#/components/schemas/User/properties/zid'
                bookmark:
                  type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
  /reports:
    post:
      summary: Lets a user report a specific review
      requestBody:
        content: 
          application/json:
            schema:
              type: object
              properties:  
                review_id:
                  $ref: '#/components/schemas/Review/properties/review_id'
                zid:
                  $ref: '#/components/schemas/User/properties/zid'
                reason:
                  $ref: '#/components/schemas/Report/properties/reason'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
    put:
      summary: Changes the status of a specific report
      requestBody:
        content: 
          application/json:
            schema:
              type: object
              properties:  
                report_id:
                  $ref: '#/components/schemas/Report/properties/report_id'
                status:
                  $ref: '#/components/schemas/Report/properties/status'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
  /${course_code}/reviews:
    get:
      summary: Gets a list of reviews associated with course code
      parameters:
        - in: path
          name: course_code   # Note the name is the same as in the path
          required: true
          schema:
            type: string
            minimum: 1
          description: The course code
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'

components:
  schemas:
    User:
      type: object
      properties:
        zid:
          type: string
        reviews:
          type: array
          items:
            $ref: "#/components/schemas/Review"
        bookmarked_reviews:
          type: array
          items:
            $ref: "#/components/schemas/Review"
        bookmarked_courses:
          type: array
          items:
            $ref: "#/components/schemas/Course"
        is_admin:
          type: boolean
    Review:
      type: object
      properties:
        review_id:
          type: string
        author_id: 
          $ref: "#/components/schemas/User/properties/zid"
        author_name:
          type: string
        description:
          type: string
        course_code:
          $ref: "#/components/schemas/Course/properties/course_code"
        rating:
          $ref: "#/components/schemas/Rating/properties/overall"
        termTaken:
          type: string
        created_timestamp:
          type: integer
        updated_timestamp:
          type: integer
        upvotes:
          type: array
          items:
            $ref: "#/components/schemas/User/properties/zid"
        reports:
          $ref: "#/components/schemas/Report"
    Course:
      type: object
      properties:
        course_code:
          type: string
        archived:
          type: boolean
        attributes:
          type: string
        calendar:
          type: string
        campus:
          type: string
        description:
          type: string
        enrolment_rules:
          type: string
        equivalents:
          type: string
        exclusions:
          type: string
        facaulty:
          type: string
        field_of_education:
          type: string
        gen_ed:
          type: boolean
        reviews:
          $ref: "#/components/schemas/Review/properties/review_id"
        manageability: 
          type: integer
        usefulness:
          type: integer
        enjoyability:
          type: integer
        overall:
          type: integer
    Report:
      type: object
      properties:
        report_id:
          type: string
        review_id:
          $ref: "#/components/schemas/Review/properties/review_id"
        reason:
          type: string
        zid:
          $ref: "#/components/schemas/User/properties/zid"
        status:
          type: string
    Rating:
      type: object
      properties:
        manageability: 
          type: integer
        usefulness:
          type: integer
        enjoyability:
          type: integer
        overall:
          type: integer